【6.2:アプリケーションの設定】

【6.2.2:サーブレットコンテナの設定】

・(2018.06.26、2018.06.28、2018.06.29)HiddenHttpMethodFilterの適用

  <groupId>example</groupId>
  <artifactId>hiddenhttpmethodfilter</artifactId>

(コメント)

・PUTメソッド、DELETEメソッドが405エラーとなる

　→Pivotal　TC　Serverの　conf/web.xml設定ファイルで、readonlyパラメータをfalseと設定すると、
　PUT,　DELETEが有効となる

　
・_method_DELETEのリクエストパラメータがDELETEメソッドとして扱われない
　（GETメソッド扱いとなる）
→　curlコマンドに　-X POST オプションを付加すると、DELETEメソッドして扱われる

	>chcp 65001

	>curl http://localhost:8080/hiddenhttpmethodfilter/books/1
	{"bookId":"1","name":"書籍名"}
	>curl -H "Content-type: application/json" -d "{\"name\":\"AAA\"}" http://localhost:8080/hiddenhttpmethodfilter/books
	{"bookId":"2","name":"AAA"}
	>curl -H "Content-type: application/json" -d "{\"bookId\":\"2\",\"name\":\"XYZ\"}" http://localhost:8080/hiddenhttpmethodfilter/books/2?_method=PUT
	{"bookId":"2","name":"XYZ"}
	>curl -X POST http://localhost:8080/hiddenhttpmethodfilter/books/2?_method=DELETE
	{"bookId":"2","name":"XYZ"}
	>curl http://localhost:8080/hiddenhttpmethodfilter/books/2


【6.2.3:フロントコントローラの設定】

・(2018.06.29、2018.06.30)indentOutput(true)：Java-config

  <groupId>example</groupId>
  <artifactId>indentoutput-javaconf</artifactId>

（コメント）

・実行結果は以下のようになった

	>curl http://localhost:8080/indentoutput-javaconf/books/1
	{
	  "bookId" : "1",
	  "name" : "書籍名"
	}
	>curl -H "Content-type: application/json" -d "{\"name\":\"AAA\"}" http://localhost:8080/indentoutput-javaconf/books
	{
	  "bookId" : "2",
	  "name" : "AAA"
	}
	>curl -H "Content-type: application/json" -X PUT -d "{\"bookId\":\"2\",\"name\":\"XYZ\"}" http://localhost:8080/indentoutput-javaconf/books/2
	{
	  "bookId" : "2",
	  "name" : "XYZ"
	}
	>curl http://localhost:8080/indentoutput-javaconf/books/2
	{
	  "bookId" : "2",
	  "name" : "XYZ"
	}
	>curl -X DELETE http://localhost:8080/indentoutput-javaconf/books/2
	{
	  "bookId" : "2",
	  "name" : "XYZ"
	}
	>curl http://localhost:8080/indentoutput-javaconf/books/2


（コメント）

・実行結果は以下のようになった

	>curl http://localhost:8080/indentoutput-xmlconf/books/1
	{
	  "bookId" : "1",
	  "name" : "書籍名"
	}
	>curl -H "Content-type: application/json" -d "{\"name\":\"AAA\"}" http://localhost:8080/indentoutput-xmlconf/books
	{
	  "bookId" : "2",
	  "name" : "AAA"
	}
	>curl -H "Content-type: application/json" -X PUT -d "{\"bookId\":\"2\",\"name\":\"XYZ\"}" http://localhost:8080/indentoutput-xmlconf/books/2
	{
	  "bookId" : "2",
	  "name" : "XYZ"
	}
	>curl -X DELETE http://localhost:8080/indentoutput-xmlconf/books/2
	{
	  "bookId" : "2",
	  "name" : "XYZ"
	}
	>curl http://localhost:8080/indentoutput-xmlconf/books/2
	

・(2018.06.30)indentOutput=rue：Java-config

	<groupId>example</groupId>
	<artifactId>indentoutput-xmlconf</artifactId>


【6.3:@RestControllerの実装】

【6.3.3:RestAPI(Handlerメソッド）の作成】

・(2018.06.30、2018.07.01)RestAPIの作成

  <groupId>example</groupId>
  <artifactId>restapi</artifactId>

	・（2018.06.30）Bookリソースの取得

	・（2018.06.30）リソースの作成

	（実行結果）
	
		>curl -v -H "Content-type: application/json" -d "{\"name\":\"Spring\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/restapi/books
		*   Trying ::1...
		* TCP_NODELAY set
		* Connected to localhost (::1) port 8080 (#0)
		> POST /restapi/books HTTP/1.1
		> Host: localhost:8080
		> User-Agent: curl/7.55.1
		> Accept: */*
		> Content-type: application/json
		> Content-Length: 46
		>
		* upload completely sent off: 46 out of 46 bytes
		< HTTP/1.1 201
		< Location: http://localhost:8080/restapi/books/878cf73b-1c1b-465c-9944-6e1c0c7f1d8c
		< Content-Length: 0
		< Date: Sat, 30 Jun 2018 10:18:02 GMT
		<
		* Connection #0 to host localhost left intact

		>curl http://localhost:8080/restapi/books/878cf73b-1c1b-465c-9944-6e1c0c7f1d8c
		{"bookId":"878cf73b-1c1b-465c-9944-6e1c0c7f1d8c","name":"Spring","publishedDate":"2016-04-01"}

	(コメント)
	
		・curlのjsonボディーに日本語を指定すると、
		HTTPステータス 400 - Bad Request
		となった（Invalid UTF-8 start byte 0x93）
		

	・（2018.07.01）リソースの更新

	（実行結果）
		
		>curl http://localhost:8080/restapi/books/00000000-0000-0000-0000-000000000000
		{"bookId":"00000000-0000-0000-0000-000000000000","name":"書籍名","publishedDate":"2010-04-20"}

		>curl -D - -H "Content-type: application/json" -d "{\"name\":\"Spring\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/restapi/books
		HTTP/1.1 201
		Location: http://localhost:8080/restapi/books/62f23434-fa20-418a-98b7-90ef610c0a86
		Content-Length: 0
		Date: Sat, 30 Jun 2018 21:45:02 GMT

		>curl http://localhost:8080/restapi/books/62f23434-fa20-418a-98b7-90ef610c0a86
		{"bookId":"62f23434-fa20-418a-98b7-90ef610c0a86","name":"Spring","publishedDate":"2016-04-01"}

		>curl -D - -H "Content-type: application/json" -X PUT -d "{\"name\":\"Spring 4.2\",\"publishedDate\":\"2016-03-20\"}" http://localhost:8080/restapi/books/62f23434-fa20-418a-98b7-90ef610c0a86
		HTTP/1.1 204
		Date: Sat, 30 Jun 2018 21:47:08 GMT

		>curl http://localhost:8080/restapi/books/62f23434-fa20-418a-98b7-90ef610c0a86
		{"bookId":"62f23434-fa20-418a-98b7-90ef610c0a86","name":"Spring 4.2","publishedDate":"2016-03-20"}
		
	・（2018.07.01）リソースの削除

	（実行結果）
	
		>curl -D - -H "Content-type: application/json" -d "{\"name\":\"Spring\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/restapi/books
		HTTP/1.1 201
		Location: http://localhost:8080/restapi/books/753d44f8-3178-4131-921c-e58aac782ec5
		Content-Length: 0
		Date: Sat, 30 Jun 2018 22:11:08 GMT

		>curl http://localhost:8080/restapi/books/753d44f8-3178-4131-921c-e58aac782ec5
		{"bookId":"753d44f8-3178-4131-921c-e58aac782ec5","name":"Spring","publishedDate":"2016-04-01"}

		>curl -D - -X DELETE http://localhost:8080/restapi/books/753d44f8-3178-4131-921c-e58aac782ec5
		HTTP/1.1 204
		Date: Sat, 30 Jun 2018 22:12:09 GMT

		>curl http://localhost:8080/restapi/books/753d44f8-3178-4131-921c-e58aac782ec5
		<!doctype html><html lang="ja"><head><title>HTTPステータス 404 - Not Found</title><style type="text/css">h1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} h2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} h3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} body {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} b {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} p {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;} a {color:black;} a.name {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTPステータス 404 - Not Found</h1><hr class="line" /><p><b>Type</b> ステータスレポート</p><p><b>説明</b> The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.</p><hr class="line" /><h3>Pivotal tc Runtime 3.2.8.RELEASE/8.5.23.A.RELEASE</h3></body></html>	
	
	・（2018.07.01）リソースの検索

	（実行結果）

		>curl -D - -H "Content-type: application/json" -d "{\"name\":\"Spring\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/restapi/books
		HTTP/1.1 201
		Location: http://localhost:8080/restapi/books/da4b31f6-b13b-4a14-aa57-0800d33d9290
		Content-Length: 0
		Date: Sun, 01 Jul 2018 07:33:14 GMT

		>curl http://localhost:8080/restapi/books
		[{"bookId":"00000000-0000-0000-0000-000000000000","name":"書籍名","publishedDate":"2010-04-20"},{"bookId":"da4b31f6-b13b-4a14-aa57-0800d33d9290","name":"Spring","publishedDate":"2016-04-01"}]
		>curl http://localhost:8080/restapi/books?name=%e6%9b%b8%e7%b1%8d
		[{"bookId":"00000000-0000-0000-0000-000000000000","name":"書籍名","publishedDate":"2010-04-20"}]
		>curl http://localhost:8080/restapi/books?publishedDate=1999-01-01
		[]
		
		
【6.3.5:URIの組み立て】

・(2018.07.03)UriComponentsBuilderを利用したURIの生成

  <groupId>example</groupId>
  <artifactId>uricomponentsbuilder</artifactId>

(実行結果)

	>curl -D - -H "Content-type: application/json" -d "{\"name\":\"Spring\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/uricomponentsbuilder/books
	HTTP/1.1 201
	Location: http://localhost:8080/uricomponentsbuilder/books/c115b5d6-8778-43ca-beeb-92a042af711c
	Content-Length: 0
	Date: Tue, 03 Jul 2018 11:16:51 GMT

	>curl http://localhost:8080/uricomponentsbuilder/books/c115b5d6-8778-43ca-beeb-92a042af711c
	{"bookId":"c115b5d6-8778-43ca-beeb-92a042af711c","name":"Spring","publishedDate":"2016-04-01"}

・(2018.07.03)MvcUriComponentsBuilderを利用したURIの生成

  <groupId>example</groupId>
  <artifactId>mvcuricomponentsbuilder</artifactId>

（実行結果）

	>curl -D - -H "Content-type: application/json" -d "{\"name\":\"Spring\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/mvcuricomponentsbuilder/books
	HTTP/1.1 201
	Location: http://localhost:8080/mvcuricomponentsbuilder/books/696be9f2-8482-4416-a3c9-9a3390b20098
	Content-Length: 0
	Date: Tue, 03 Jul 2018 11:10:19 GMT

	>curl http://localhost:8080/mvcuricomponentsbuilder/books/696be9f2-8482-4416-a3c9-9a3390b20098
	{"bookId":"696be9f2-8482-4416-a3c9-9a3390b20098","name":"Spring","publishedDate":"2016-04-01"}


【6.4:リソースクラスの実装】

【6.4.1:リソースクラスの作成】

・（2018.07.04）リソースクラスの作成

  <groupId>example</groupId>
  <artifactId>resourceclass</artifactId>

(実行結果)

	>curl http://localhost:8080/resourceclass/books/1
	{"bookId":"1","name":"書籍名","authors":["著者A"],"publishedDate":{"year":2016,"month":"APRIL","dayOfMonth":1,"monthValue":4,"dayOfWeek":"FRIDAY","era":"CE","dayOfYear":92,"leapYear":true,"chronology":{"id":"ISO","calendarType":"iso8601"}},"pulisher":{"name":"翔泳社","tel":"03-xxxx-xxxx"}}


【6.4.2:Jacksonの機能を使用したフォーマットの制御】

・（2018.07.04）JSONにインデントを設ける方法（Java　Config）

  <groupId>example</groupId>
  <artifactId>indentoutput-javaconf</artifactId>

（コメント）

・ObjectMapperをBEAN定義するだけでは、インデント出力されない
WebMvcConfigでextendMessageConvertersをオーバーライドする必要がある
「6.2.3:HttpMessageConverterの適用」を参照

（実行結果）

	>curl http://localhost:8080/indentoutput-javaconf/books/1
	{
	  "bookId" : "1",
	  "name" : "書籍名",
	  "authors" : [ "著者A" ],
	  "publishedDate" : {
	    "year" : 2016,
	    "month" : "APRIL",
	    "dayOfMonth" : 1,
	    "monthValue" : 4,
	    "dayOfWeek" : "FRIDAY",
	    "era" : "CE",
	    "dayOfYear" : 92,
	    "leapYear" : true,
	    "chronology" : {
	      "id" : "ISO",
	      "calendarType" : "iso8601"
	    }
	  },
	  "pulisher" : {
	    "name" : "翔泳社",
	    "tel" : "03-xxxx-xxxx"
	  }
	}


・（2018.07.05）JSONにインデントを設ける方法（XML　Config）

  <groupId>example</groupId>
  <artifactId>indentoutput-xmlconf</artifactId>

(実行結果)

	>curl http://localhost:8080/indentoutput-xmlconf/books/1
	{
	  "bookId" : "1",
	  "name" : "書籍名",
	  "authors" : [ "著者A" ],
	  "publishedDate" : {
	    "year" : 2016,
	    "month" : "APRIL",
	    "dayOfMonth" : 1,
	    "monthValue" : 4,
	    "dayOfWeek" : "FRIDAY",
	    "era" : "CE",
	    "dayOfYear" : 92,
	    "leapYear" : true,
	    "chronology" : {
	      "id" : "ISO",
	      "calendarType" : "iso8601"
	    }
	  },
	  "pulisher" : {
	    "name" : "翔泳社",
	    "tel" : "03-xxxx-xxxx"
	  }
	}
	

・（2018.07.05）Date and Time APIのクラスをサポートする方法

  <groupId>example</groupId>
  <artifactId>jackson-datatype-jsr310</artifactId>

（実行結果）

	>curl http://localhost:8080/jackson-datatype-jsr310/books/1
	{
	  "bookId" : "1",
	  "name" : "書籍名",
	  "authors" : [ "著者A" ],
	  "publishedDate" : [ 2016, 4, 1 ],
	  "pulisher" : {
	    "name" : "翔泳社",
	    "tel" : "03-xxxx-xxxx"
	  }
	}


・（2018.07.05）日付型のフォーマットを指定する方法（Java config）

  <groupId>example</groupId>
  <artifactId>stddateformat-javaconf</artifactId>

（実行結果）

	>curl http://localhost:8080/stddateformat-javaconf/books/1
	{
	  "bookId" : "1",
	  "name" : "書籍名",
	  "authors" : [ "著者A" ],
	  "publishedDate" : "2016-04-01",
	  "pulisher" : {
	    "name" : "翔泳社",
	    "tel" : "03-xxxx-xxxx"
	  }
	}
	

・（2018.07.05）日付型のフォーマットを指定する方法（XML config）

  <groupId>example</groupId>
  <artifactId>stddateformat-xmlconf</artifactId>

(実行結果)

	>curl http://localhost:8080/stddateformat-xmlconf/books/1
	{
	  "bookId" : "1",
	  "name" : "書籍名",
	  "authors" : [ "著者A" ],
	  "publishedDate" : "2016-04-01",
	  "pulisher" : {
	    "name" : "翔泳社",
	    "tel" : "03-xxxx-xxxx"
	  }
	}
	


【6.5:例外ハンドリング】

【6.5.2:Spring　MVCの例外ハンドラの実装】

・（2018.07.07）例外ハンドラクラスの作成

  <groupId>example</groupId>
  <artifactId>responseentityexceptionhandler</artifactId>

(実行結果)

	・入力チェック例外：nameプロパティが空の時
	
	>curl -D - -H "Content-type: application/json" -d "{\"name\":\"\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/responseentityexceptionhandler/books
	HTTP/1.1 400
	Content-Length: 0
	Date: Sat, 07 Jul 2018 06:33:36 GMT
	Connection: close

	・サポートしてないHTTPメソッド：PUTメソッドを指定
	
	>curl -D - -H "Content-type: application/json" -X PUT -d "{\"name\":\"Spring\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/responseentityexceptionhandler/books
	HTTP/1.1 405
	Allow: POST
	Content-Length: 0
	Date: Sat, 07 Jul 2018 06:34:41 GMT
	

・（2018.07.07）エラー情報をレスポンスボディに出力

  <groupId>example</groupId>
  <artifactId>output-errorinfo</artifactId>

（実行結果）

	・入力チェック例外：nameプロパティが空の時

	>curl -D - -H "Content-type: application/json" -d "{\"name\":\"\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/output-errorinfo/books
	HTTP/1.1 400
	Content-Type: application/json;charset=UTF-8
	Transfer-Encoding: chunked
	Date: Sat, 07 Jul 2018 07:16:46 GMT
	Connection: close

	{
	  "message" : "Validation failed for argument at index 0 in method: public org.springframework.http.ResponseEntity<java.lang.Void> example.app.BooksRestController.createBook(example.app.BookResource,org.springframework.web.util.UriComponentsBuilder), with 1 error(s): [Field error in object 'bookResource' on field 'name': rejected value []; codes [NotEmpty.bookResource.name,NotEmpty.name,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [bookResource.name,name]; arguments []; default message [name]]; default message [may not be empty]] ",
	  "documentation_url" : "http://example.com/api/errors"
	}

	・サポートしてないHTTPメソッド：PUTメソッドを指定

	>curl -D - -H "Content-type: application/json" -X PUT -d "{\"name\":\"Spring\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/output-errorinfo/books
	HTTP/1.1 405
	Allow: POST
	Content-Type: application/json;charset=UTF-8
	Transfer-Encoding: chunked
	Date: Sat, 07 Jul 2018 07:17:25 GMT

	{
	  "message" : "Request method 'PUT' not supported",
	  "documentation_url" : "http://example.com/api/errors"
	}	


・（2018.07.07）エラーメッセージの解決方法

  <groupId>example</groupId>
  <artifactId>resolve-errormessage</artifactId>

（実行結果）

	・不正なJSON：閉じ括弧がない
	
	>curl -D - -H "Content-type: application/json" -d "{\"name\":\"Spring\",\"publishedDate\":\"2016-04-01\"" http://localhost:8080/resolve-errormessage/books
	HTTP/1.1 400
	Content-Type: application/json;charset=UTF-8
	Transfer-Encoding: chunked
	Date: Sat, 07 Jul 2018 08:02:14 GMT
	Connection: close

	{
	  "message" : "Request body is invalid",
	  "documentation_url" : "http://example.com/api/errors"
	}

	・サポートしてないHTTPメソッド：PUTメソッドを指定

	>curl -D - -H "Content-type: application/json" -X PUT -d "{\"name\":\"Spring\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/resolve-errormessage/books
	HTTP/1.1 405
	Allow: POST
	Content-Type: application/json;charset=UTF-8
	Transfer-Encoding: chunked
	Date: Sat, 07 Jul 2018 08:05:19 GMT
	
	{
	  "message" : "Request method 'PUT' not supported",
	  "documentation_url" : "http://example.com/api/errors"
	}

【6.5.3:ハンドリング対象の例外クラスの追加】

・（2018.07.07）ユーザ定義のカスタム例外のハンドリング

  <groupId>example</groupId>
  <artifactId>handle-userexception</artifactId>
	
（実行結果）

	・存在しないBookIdを指定（BookResourceNotFoundExceptionが発生）
	
	>curl -D - http://localhost:8080/handle-userexception/books/00000000-0000-0000-0000-000000000001
	HTTP/1.1 404
	Content-Type: application/json;charset=UTF-8
	Transfer-Encoding: chunked
	Date: Sat, 07 Jul 2018 09:15:57 GMT

	{
	  "message" : "Book is not found (bookId = 00000000-0000-0000-0000-000000000001)",
	  "documentation_url" : "http://example.com/api/errors"
	}


・（2018.07.07）システム例外のハンドリング

  <groupId>example</groupId>
  <artifactId>handle-systemexception</artifactId>

（実行結果）

	・強制的にシステム例外を発生
	
	>curl -D - http://localhost:8080/handle-systemexception/books/raise-exception
	HTTP/1.1 500
	Content-Type: application/json;charset=UTF-8
	Transfer-Encoding: chunked
	Date: Sat, 07 Jul 2018 10:09:30 GMT
	Connection: close

	{
	  "message" : "System error is occurred",
	  "documentation_url" : "http://example.com/api/errors"
	}


【6.5.4:入力チェック例外のハンドリング】

・（2018.07.08）適切なエラーメッセージへの変換

  <groupId>example</groupId>
  <artifactId>handle-validationexception</artifactId>

(実行結果)

	・nameプロパティが空の時
	
	>curl -D - -H "Content-type: application/json" -d "{\"name\":\"\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/handle-validationexception/books
	HTTP/1.1 400
	Content-Type: application/json;charset=UTF-8
	Transfer-Encoding: chunked
	Date: Sat, 07 Jul 2018 23:11:10 GMT
	Connection: close

	{
	  "message" : "Request value is invalid",
	  "documentation_url" : "http://example.com/api/errors"
	}

	・publishedDateプロパティが不正な値の時
	
	>curl -D - -H "Content-type: application/json" -d "{\"name\":\"Spring\",\"publishedDate\":\"2016-04-ab\"}" http://localhost:8080/handle-validationexception/books
	HTTP/1.1 400
	Content-Type: application/json;charset=UTF-8
	Transfer-Encoding: chunked
	Date: Sat, 07 Jul 2018 23:11:50 GMT
	Connection: close

	{
	  "message" : "Request body is invalid",
	  "documentation_url" : "http://example.com/api/errors"
	}


・（2018.07.08）エラーの詳細情報の出力

  <groupId>example</groupId>
  <artifactId>output-details</artifactId>


（実行結果）

	・nameが空の時

	>curl -D - -H "Content-type: application/json" -d "{\"name\":\"\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/output-details/books
	HTTP/1.1 400
	Content-Type: application/json;charset=UTF-8
	Transfer-Encoding: chunked
	Date: Sat, 07 Jul 2018 23:49:53 GMT
	Connection: close

	{
	  "message" : "Request value is invalid",
	  "details" : [ {
	    "target" : "name",
	    "message" : "may not be empty"
	  } ],
	  "documentation_url" : "http://example.com/api/errors"
	}

	・publishedDateが未入力の時
	
	>curl -D - -H "Content-type: application/json" -d "{\"name\":\"Spring\"}" http://localhost:8080/output-details/books
	HTTP/1.1 400
	Content-Type: application/json;charset=UTF-8
	Transfer-Encoding: chunked
	Date: Sat, 07 Jul 2018 23:50:22 GMT
	Connection: close

	{
	  "message" : "Request value is invalid",
	  "details" : [ {
	    "target" : "publishedDate",
	    "message" : "may not be null"
	  } ],
	  "documentation_url" : "http://example.com/api/errors"
	}

	・publishedDateが不正な時（詳細情報が出力されない！！！）
	
	>curl -D - -H "Content-type: application/json" -d "{\"name\":\"Spring\",\"publishedDate\":\"2016-04-ab\"}" http://localhost:8080/output-details/books
	HTTP/1.1 400
	Content-Type: application/json;charset=UTF-8
	Transfer-Encoding: chunked
	Date: Sat, 07 Jul 2018 23:50:40 GMT
	Connection: close

	{
	  "message" : "Request body is invalid",
	  "documentation_url" : "http://example.com/api/errors"
	}
	

【6.5.5:サーブレットコンテナに通知されたエラーの応答】

・（2018.07.08）サーブレットコンテナに通知されたエラーの応答

  <groupId>example</groupId>
  <artifactId>handle-servleterror</artifactId>


(実行結果)

	・存在しないパスを取得
	
	>curl -D - http://localhost:8080/handle-servleterror/notfound
	HTTP/1.1 404
	Content-Type: application/json;charset=UTF-8
	Transfer-Encoding: chunked
	Date: Sun, 08 Jul 2018 11:05:59 GMT

	{
	  "message" : "Not Found",
	  "documentation_url" : "http://example.com/api/errors"
	}
	
	
【6.6:RESTクライアントの実装】

(ドキュメント)

	2. RestTemplate Module
	https://docs.spring.io/autorepo/docs/spring-android/1.0.x/reference/html/rest-template.html
	
【6.6.3:REST APIの呼び出し】

・（2018.07.09）リソースの取得（String.class)

  <groupId>example</groupId>
  <artifactId>getforobject-string</artifactId>

・（2018.07.10）リソースの取得（BookResource.class)

  <groupId>example</groupId>
  <artifactId>getforobject-bookresource</artifactId>

・（2018.07.10）リソースの作成

  <groupId>example</groupId>
  <artifactId>postforlocation</artifactId>

・（2018.07.10）リクエストヘッダーの設定

  <groupId>example</groupId>
  <artifactId>exchange</artifactId>

・（2018.07.10）HTTPステータスとレスポンスヘッダの取得

  <groupId>example</groupId>
  <artifactId>postforentity</artifactId>

・（2018.07.11）URIテンプレートの利用（URIテンプレートを使用してREST APIを呼び出す）

  <groupId>example</groupId>
  <artifactId>getforobject-template</artifactId>

・（2018.07.11）URIテンプレートの利用(UriComponentsBuilderを使用してURIをテンプレートを扱う)

  <groupId>example</groupId>
  <artifactId>requestentity-uricomponentsbuilder</artifactId>

・（2018.07.13）その他のリソース操作(put)

  <groupId>example</groupId>
  <artifactId>put</artifactId>

・（2018.07.13）その他のリソース操作(delete)

  <groupId>example</groupId>
  <artifactId>delete</artifactId>

