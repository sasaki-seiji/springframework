【12.1:Thymeleafとは】
【12.2:Spring+Thymeleafのセットアップ】

(コメント)
	thymeleaf-spring5 では、ServletContextTemplateResolverのコンストラクタ引数に
	ServletContextが必要

	ThymeleafConfigクラスを以下のように修正
	
	@Configuration
	public class ThymeleafConfig {

		@Autowired
		ServletContext context;
	
		@Bean
		public ServletContextTemplateResolver templateResolver() {
			ServletContextTemplateResolver resolver =
					new ServletContextTemplateResolver(context); 
						// 2019.02.11: need ServletContext param for thymeleaf-spring5
			resolver.setPrefix("/WEB-INF/templates/");
			resolver.setSuffix(".html");
			resolver.setTemplateMode("HTML5");
			resolver.setCharacterEncoding("UTF-8");
			return resolver;
		}
		・・・
	}
		
【12.3:Thymeleafを利用したViewの実装】

【12.3.1:初めてのThymeleaf】

・(2019.02.11、2019.05.18)初めてのThyeleaf（Java-config）

	<groupId>example</groupId>
	<artifactId>firstapp</artifactId>

　(ベース)　ch04:firstapp

　(コメント)　2019.05.18

	echo/outpu.htmlにおいて、spanタグはth:objectによってコンテキストが指定されていない
	ので、選択変数式*{echoForm.text}ではなく、変数式${echoForm.text}と書かれるべき
	
	<!-- 2019.05.18 change
		「<span th:text="*{echoForm.text}">ここに入力した値が表示される</span>」
	-->
		「<span th:text="${echoForm.text}">ここに入力した値が表示される</span>」

【12.3.2:テキストの出力】

・(2019.02.11)初めてのThyeleaf（Java-config）

	<groupId>example</groupId>
	<artifactId>th-utext</artifactId>

　(ベース)　12.3.1:firstapp

【12.3.4:th属性による属性値の設定】

・(2019.05.23)現在の属性値の前後に値を追加する方法

	<groupId>example</groupId>
	<artifactId>th-checked</artifactId>

　(ベース)　12.3.4:th-checked

・(2019.05.19、2019.05.22)存在有無が重要な属性の出力を制御する方法

	<groupId>example</groupId>
	<artifactId>th-classappend</artifactId>

　(ベース)　12.3.1:firstapp

・(2019.05.22)複数の属性に同じ値を設定する方法

	<groupId>example</groupId>
	<artifactId>th-alt-title</artifactId>

　(ベース)　12.3.4:th-checked
　
　(コメント：静的リソースを参照する方法

　	(参照)　https://qiita.com/kazuki43zoo/items/e12a72d4ac4de418ee37

	以下の手順で設定する
	
	①WebMvcConfigクラスで静的リソースのマッピングを定義する

		// see https://qiita.com/kazuki43zoo/items/e12a72d4ac4de418ee37
	    @Override
	    public void addResourceHandlers(ResourceHandlerRegistry registry) {
	        registry.addResourceHandler("/images/**")
	                .addResourceLocations("classpath:/images/");
	    }

	②src/main/resourcesは以下のimagesフォルダ以下にイメージファイルを配置する
	
　(コメント：メッセージ式#{..}の利用）
　
　	Thymeleafのメッセージ式#{..}から、Spring管理のメッセージを利用することができる
　	2.7.3:ネイティブコードのメッセージ定義を参照

・(2019.05.25)任意の属性を設定する方法

	<groupId>example</groupId>
	<artifactId>th-attr</artifactId>

　(ベース)　12.3.4:th-checked

　(コメント）
　
　・独自データ属性へjavascriptからアクセスするには、以下を参照のこと
　
　	参考：HTML5における独自データ属性の取り扱い
　	https://qiita.com/beliefarrow/items/388eb277843e2d0c03de

　・STSのウインドウからはjavacriptが動作しない模様
　
　	少なくとも、window.alert関数は動作しない。
　	動作確認はmicrosoft　edge　を利用した　
　
	
【12.3.5:HTML要素の出力制御】

・(2019.05.25)条件による出力有無の制御

	<groupId>example</groupId>
	<artifactId>th-if-switch</artifactId>

　(ベース)　12.3.4:th-checked

・(2019.05.26)繰り返し出力の制御

	<groupId>example</groupId>
	<artifactId>th-each</artifactId>

　(ベース)　12.3.4:th-checked

【12.3.6:インライン記述】

・(2019.05.26)インライン記述

	<groupId>example</groupId>
	<artifactId>inline</artifactId>

　(ベース)　12.3.4:th-checked

　(コメント)
　
　	テキストの記述と異なり、th:text属性の値は、要素自体ではなく、
　	子要素(text属性)を置き換える

【12.3.7:コメント】

・(2019.05.26)コメント

	<groupId>example</groupId>
	<artifactId>comment</artifactId>

　(ベース)　12.3.4:th-checked

【12.3.8:Springとの連携】

・(2019.05.26)フォームオブジェクトのバインディング、入力エラーの表示

	<groupId>example</groupId>
	<artifactId>formbinding</artifactId>

　(ベース)　12.3.1:firstapp

・(2019.05.28)SpELの利用

	<groupId>example</groupId>
	<artifactId>spel</artifactId>

　(ベース)　12.3.7:comment
　
・(2019.05.29)ConversionServiceとの連携

	<groupId>example</groupId>
	<artifactId>conversionservice</artifactId>

　(ベース)　12.3.8:spel
　
　(コメント)
　
　	プロパティの使い方については、2.4.1を参照

【12.3.9:テンプレートの共通化】

・(2019.05.29)テンプレートのフラグメント化

	<groupId>example</groupId>
	<artifactId>fragment</artifactId>

　(ベース)　12.3.4:th-checked

　(コメント)
　
　	フラグメントの検索パスは、
　	ServletContextTemplateResolver.setPrefix("/WEB-INF/templates/")
　	で設定したパスとなる

・(2019.06.02)テンプレートのレイアウト化

	<groupId>example</groupId>
	<artifactId>layout</artifactId>

　(ベース)　12.3.9:fragment

　(問題)
　
　	stript要素でJSスクリプトを読み込んで動作させようとしたが
　	うまくいっていない

【12.3.11:JSR 310: Date and Time APIの利用】

・(2019.06.05)JSR 310: Date and Time APIの利用

	<groupId>example</groupId>
	<artifactId>jsr310</artifactId>

　(ベース)　12.3.8:conversionservice

　(コメント)
　
　	・テキストの記述と異なり、thymeleaf-extras-java8timeは
　	　io.spring.platformによってマネージされている
　	　
　		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-java8time</artifactId>
			<!-- 2019.06.05 already managed
			<version>3.0.4.RELEASE</version>
			-->
		</dependency>

	・thymeleaf-extras-java8timeは<dependencies>の記述順でthymeleaf-spring5に
	　依存している(後で書く必要がある。そうでないとWEBサービスがうまく立ち上がらない）

		<!-- 2019.02.11 -->
		<dependency>
			<groupId>org.thymeleaf</groupId>
			<artifactId>thymeleaf-spring5</artifactId>
		</dependency>

		<!-- 2019.06.05 -->
		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-java8time</artifactId>
			<!-- 2019.06.05 already managed
			<version>3.0.4.RELEASE</version>
			-->
		</dependency>

　	