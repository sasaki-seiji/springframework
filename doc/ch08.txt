【8.2:DIコンテナ管理のBeanに対するテスト】

【8.2.1:Beanの単体テスト】

・(2018.08.09)Beanの単体テスト(JUnit)

  <groupId>com.example</groupId>
  <artifactId>bean-junit</artifactId>

  <dependencies>
	<dependency>	<!-- for @Service annotaion -->
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
	</dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

（コメント）
	テキストのコードを動作させるためには、JUnit4を使用する

・(2018.08.09)Beanの単体テスト(mockito)
	
  <groupId>com.example</groupId>
  <artifactId>bean-mockito</artifactId>

  <dependencies>
	<dependency>	<!-- for @Service annotaion -->
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
	</dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

（コメント）
	・テキストのコードを動作させるためには、JUnit4を使用する

	・org.mockito.runners.MockitoJUnitRunnerはdeprecatedとなっている
	　代わりに、org.mockito.junit.MockitoJUnitRunnerを使う
	　
	　参考：https://stackoverflow.com/questions/41909538/mockitojunitrunner-is-deprecated


【8.2.2:DIコンテナ内のBeanに対する結合テスト】

・(2018.08.10)DIコンテナ内のBeanに対する結合テスト

  <groupId>com.example</groupId>
  <artifactId>bean-integration-test</artifactId>

  <dependencies>
	<dependency>	<!-- for @Configuration, @Service annotaion -->
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
	</dependency>
    <dependency>	<!--  for SpringJUnit4ClassRunner, @ContetConfiguration -->
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>


・(2018.08.10)DIコンテナ内のBeanに対する結合テスト（XML-config）

pom.xml（抜粋）:

  <groupId>com.example</groupId>
  <artifactId>bean-integration-test-xmlconf</artifactId>

  <dependencies>
	<dependency>	<!-- for @Configuration, @Service annotaion -->
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
	</dependency>
    <dependency>	<!--  for SpringJUnit4ClassRunner, @ContextConfiguration -->
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

applicationContext.xml：

	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd">

		<context:component-scan base-package="com.example.domain"/>

		<bean id="messageSource" 
			class="org.springframework.context.support.ResourceBundleMessageSource">
			<property name="basenames">
				<list>
					<value>messages</value>
				</list>
			</property>
		</bean>
	
	</beans>
	

【8.2.4:DIコンテナのコンフィギュレーション】

・(2018.08.19)デフォルトのBean定義ファイル(Java-config)

  <groupId>com.example</groupId>
  <artifactId>default-beandef</artifactId>

	ベース：(2018.08.10)DIコンテナ内のBeanに対する結合テスト

・(2018.08.19)デフォルトのBean定義ファイル(XML-config)

  <groupId>com.example</groupId>
  <artifactId>default-beandef-xmlconf</artifactId>

	ベース:(2018.08.10)DIコンテナ内のBeanに対する結合テスト（XML-config）

【8.3.1:テスト用のデータソースの設定】
【8.3.2:テストデータのセットアップ】

・(2018.09.06、2018.09.08)データベースアクセス処理のテスト

　ベース：【8.2.2:DIコンテナ内のBeanに対する結合テスト】の bean-integration-test
		 【3.3.2:宣言的トランザクション】の transactional

  <groupId>com.example</groupId>
  <artifactId>db-test</artifactId>

 (依存パッケージ)
 
  <dependencies>
		<dependency>	<!-- for @Service annotaion, etc. -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

	    <dependency>	<!--  for SpringJUnit4ClassRunner, @ContetConfiguration -->
	      <groupId>org.springframework</groupId>
	      <artifactId>spring-test</artifactId>
	      <scope>test</scope>
	    </dependency>

		<!-- org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder, etc. -->
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>

		<!-- org.h2.Driver -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>

  </dependencies>
 
 
【8.3.3:テストケース用のトランザクション制御】

・(2018.09.08)トランザクション制御の移動（PostgresSQL)

　ベース：【8.2.2:DIコンテナ内のBeanに対する結合テスト】の bean-integration-test
		 【3.3.2:宣言的トランザクション】の transactional-pg

  <groupId>com.example</groupId>
  <artifactId>transactional-pg</artifactId>

	<dependencies>
		<dependency>	<!-- for @Configuration, @Service annotaion -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<dependency>	<!-- for SpringJUnit4ClassRunner, @ContetConfiguration -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- org.springframework.transaction.annotation.EnableTransactionManagement, 
			etc. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>

		<!-- org.apache.commons.dbcp2.BasicDataSource -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-dbcp2</artifactId>
		</dependency>

		<!-- org.postgresql.Driver -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>
	</dependencies>


　(結果の確認)
　
　	テスト実行後、PostgreSQLの状態が元に戻っていること（Rollback)を確認
　	
	sample=> select * from account;
	 id  | name
	-----+------
	 001 | XXX
	 002 | YYY
	 003 | ZZZ
	(3 行)


・（2018.09.08）トランザクション境界でのロールバック/コミットの制御（PostgresSQL)

　ベース：transactional-pg

  <groupId>com.example</groupId>
  <artifactId>transactional-commit-pg</artifactId>


　(結果の確認)
　
	テスト実行後、PostgreSQLの状態が、テスト結果を反映していることを確認
	
	初期状態：

	sample=> select * from account;
 	 id  | name
	-----+------
	 001 | XXX
	 002 | YYY
	 003 | ZZZ
	(3 行)

	テスト実行後：
	
	sample=> select * from account;
	 id  |    name
	-----+------------
	 001 | Spring太郎
	(1 行)

	テスト後、テーブルをを初期化しておく
	
	sample=> \i sql/schema-account.sql
	DROP TABLE
	CREATE TABLE
	sample=> \i sql/insert-dummy-account.sql
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	sample=> select * from account;
	 id  | name
	-----+------
	 001 | XXX
	 002 | YYY
	 003 | ZZZ
	(3 行)

【8.3.4:テーブルの中身の検証】

・(2018.09.08)テーブルの中身の検証（H2)

　ベース：db-test
　
  <groupId>com.example</groupId>
  <artifactId>confirm-update</artifactId>

・(2018.09.08)テーブルの中身の検証（PostgreSQL)

　ベース：transactional-pg
　
  <groupId>com.example</groupId>
  <artifactId>confirm-update-pg</artifactId>
　
　(結果の確認)
　
　	テスト実行後、acountテーブルに変化がないこと

	実行前：
	
	sample=> select * from account;
	 id  | name
	-----+------
	 001 | XXX
	 002 | YYY
	 003 | ZZZ
	(3 行)

	実行後：
	
	sample=> select * from account;
	 id  | name
	-----+------
	 001 | XXX
	 002 | YYY
	 003 | ZZZ
	(3 行)	


【8.4:Spring MVCのテスト】

【8.4.2:MockMvcのセットアップ】
【8.4.3:テストの実行】

・(2018.09.28)MockMvcを使ったfirstappのテスト

　ベース：firstapp

  <groupId>example</groupId>
  <artifactId>mockmvc-firstapp</artifactId>
　
　(コメント)
　
　・スタンドアロンモードのdependency
　
　	スタンドアロンモードでは、com.sun.el.ExpressionFactoryImplに依存する
　	以下の、dependencyを追加する(バージョン指定が必要)
　	
　        <groupId>org.glassfish.web</groupId>
          <artifactId>el-impl</artifactId>
          <version>2.2</version>

　・スタンドアロンモードの結果の確認
　
	スタンドアロンモードでは、forwoardedUrlのチェックにfailする
　
		/* 2018.09.29: modify
		mockMvc.perform(get("/"))
			.andExpect(status().isOk())
			.andExpect(forwardedUrl("/WEB-INF/index.jsp"));
		*/
		mockMvc.perform(get("/"))
			.andExpect(status().isOk());

	実行結果を、MocMvcResultHandlers.print()で見ると、以下のようになっている

	MockHttpServletResponse:
	           Status = 200
	    Error message = null
	          Headers = {Content-Language=[en]}
	     Content type = null
	             Body = 
	    Forwarded URL = index
	   Redirected URL = null
	          Cookies = []
