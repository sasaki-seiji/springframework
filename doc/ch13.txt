	
【13.1:Spring Boot とは】

【13.1.1:Spring Boot で作る Hello World アプリケーション】

・(2019.06.07)Hello World アプリケーション

	artifact：demo

　(コメント)　2019.06.07

	pom.xmlの1行目がエラーとなる。ビルド・実行はできる
　	
　	記事：https://stackoverflow.com/questions/56142369/why-am-i-getting-unknown-error-in-line-1-of-pom-xml
　	に従い、eclipseにプラグインをインストール
　	⇒うまくいかない
　	
【13.1.4:実行可能jarの作成】

・(2019.06.08)テキストの手順に従い実行


【13.2:Spring Boot で Spring MVC】

【13.2.1:Restful Web サービスの作成】

・(2019.06.08)restful

	<groupId>com.example</groupId>
	<artifactId>restful</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		restful
　	Options:
　		Description:	RESTful Web service Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.restfulから変更)
	Developer Tools:	Spring Web Starter を追加

　(実行結果)
　
	>curl http://localhost:8080/messages
	[]
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#1\"}"  http://localhost:8080/messages
	{"text":"message#1"}
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#2\"}"  http://localhost:8080/messages
	{"text":"message#2"}
	>curl http://localhost:8080/messages
	[{"text":"message#1"},{"text":"message#2"}]

　(コメント)

	Spring Boot 2.1.5にバグがあり、STS上でpom.xmlの1行目がエラーとなる
	2.1.4にダウングレードして、Maven Update を実行

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	参考：https://stackoverflow.com/questions/56142369/why-am-i-getting-unknown-error-in-line-1-of-pom-xml


・(2019.06.08)thymeleaf

	<groupId>com.example</groupId>
	<artifactId>thymeleaf</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		thymeleaf
　	Options:
　		Description:	Thymeleaf Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.restfulから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf を追加


・(2019.06.09)静的ファイル

	<groupId>com.example</groupId>
	<artifactId>staticfile</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		staticfile
　	Options:
　		Description:	static file Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.staticfileから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf を追加

　（コメント）
　
　	application.propertiesにspring.resources.cache-periodプロパティーを設定すると、
　	以下のエラーとなる

	The elements [spring.resources.cache-period] were left unbound.

・(2019.06.09)メッセージの外部化

	<groupId>com.example</groupId>
	<artifactId>messages</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		messages
　	Options:
　		Description:	Messages Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.messagesから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf を追加


・(2019.06.09)Spring MVC の設定のカスタマイズ

	<groupId>com.example</groupId>
	<artifactId>viewcontroller</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		viewcontroller
　	Options:
　		Description:	View Controller Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.viewcontrollerから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf を追加


【13.3:Sprint Boot でデータアクセス】

【13.3.1:Spring JDBC】

・(2019.06.11)Spring JDBC for H2

	<groupId>com.example</groupId>
	<artifactId>JdbcH2</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		JdbcH2
　	Options:
　		Description:	JDBC for H2 Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.JdbcH2から変更)
	Developer Tools:	Spring Web Starter, JDBC API, H2 Database を追加

　(実行結果)
　
	>curl http://localhost:8080/messages
	[]
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#1\"}"  http://localhost:8080/messages
	{"text":"message#1"}
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#2\"}"  http://localhost:8080/messages
	{"text":"message#2"}
	>curl http://localhost:8080/messages
	[{"text":"message#1"},{"text":"message#2"}]


・(2019.06.12)Spring JDBC for PostgreSQL

	<groupId>com.example</groupId>
	<artifactId>JdbcPostgreSQL</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		JdbcPostgreSQL
　	Options:
　		Description:	JDBC for PostreSQL Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.JdbcPostgreSQLから変更)
	Developer Tools:	Spring Web Starter, JDBC API, PostgreSQL Driver を追加

　(データベースの設定)

	C:\books\springframework\ch13\13-3\JdbcPostgreSQL\src\main\resources>psql -U demo -d sample
	ユーザー demo のパスワード:demo
	psql (10.3)
	"help" でヘルプを表示します。

	sample=> \i schema.sql
	CREATE TABLE
	sample=> \dt
             リレーション一覧
	 スキーマ |    名前    |    型    | 所有者
	----------+------------+----------+--------
	 public   | account    | テーブル | demo
	 public   | equipment  | テーブル | demo
	 public   | messages   | テーブル | demo
	 public   | room       | テーブル | demo
	 public   | user_table | テーブル | demo
	(5 行)

　(実行結果)
　
	>curl http://localhost:8080/messages
	[]
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#1\"}"  http://localhost:8080/messages
	{"text":"message#1"}
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#2\"}"  http://localhost:8080/messages
	{"text":"message#2"}
	>curl http://localhost:8080/messages
	[{"text":"message#1"},{"text":"message#2"}]

　(データベースの確認）
　
	sample=> select * from messages;
	 id |   text
	----+-----------
	  1 | message#1
	  2 | message#2
	(2 行)


【13.3.2:Spring Data JPA】

・(2019.06.15)Spring Data JPA for H2

	<groupId>com.example</groupId>
	<artifactId>DataJpaH2</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		DataJpaH2
　	Options:
　		Description:	Spring data JPA for H2 Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.DataJpaH2から変更)
	Developer Tools:	Spring Web Starter, Spring Data JPA, H2 Database を追加

　(実行結果)
　
	>curl http://localhost:8080/messages
	[]
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#1\"}"  http://localhost:80	80/messages
	{"id":1,"text":"message#1"}
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#2\"}"  http://localhost:8080/messages
	{"id":2,"text":"message#2"}
	>curl http://localhost:8080/messages
	[{"id":1,"text":"message#1"},{"id":2,"text":"message#2"}]

　(コメント)

	@Transactionalを使って、トランザクション制御を行っていないが、
	これは問題ないのか？


・(2019.06.15)Spring Data JPA for PostgreSQL

	<groupId>com.example</groupId>
	<artifactId>DataJpaPG</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		DataJpaPG
　	Options:
　		Description:	Spring data JPA for PostgreSQL Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.DataJpaPGから変更)
	Developer Tools:	Spring Web Starter, Spring Data JPA, PostgreSQL Driver を追加

　(実行結果)

	・データベースの初期状態

	sample=> select * from messages ;
	 id |   text
	----+-----------
	  1 | message#1
	  2 | message#2
	(2 行)

	・コマンドウインドウからREST発行
	
	>curl http://localhost:8080/messages
	[{"id":1,"text":"message#1"},{"id":2,"text":"message#2"}]
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#3\"}"  http://localhost:8080/messages
	{"id":3,"text":"message#3"}
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#4\"}"  http://localhost:8080/messages
	{"id":4,"text":"message#4"}
	>curl http://localhost:8080/messages
	[{"id":1,"text":"message#1"},{"id":2,"text":"message#2"},{"id":3,"text":"message#3"},{"id":4,"text":"message#4"}]

	・データベースの最終状態
	
	sample=> select * from messages ;
	 id |   text
	----+-----------
	  1 | message#1
	  2 | message#2
	  3 | message#3
	  4 | message#4
	(4 行)
	　
　(コメント)

	@Transactionalを使って、トランザクション制御を行っていないが、
	これは問題ないのか？
	リポジトリのプロキシクラスがトランザクションを発行しているのかもしれない？？
	