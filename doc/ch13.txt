	
【13.1:Spring Boot とは】

【13.1.1:Spring Boot で作る Hello World アプリケーション】

・(2019.06.07)Hello World アプリケーション

	artifact：demo

　(コメント)　2019.06.07

	pom.xmlの1行目がエラーとなる。ビルド・実行はできる
　	
　	記事：https://stackoverflow.com/questions/56142369/why-am-i-getting-unknown-error-in-line-1-of-pom-xml
　	に従い、eclipseにプラグインをインストール
　	⇒うまくいかない
　	
【13.1.4:実行可能jarの作成】

・(2019.06.08)テキストの手順に従い実行


【13.2:Spring Boot で Spring MVC】

【13.2.1:Restful Web サービスの作成】

・(2019.06.08)restful

	<groupId>com.example</groupId>
	<artifactId>restful</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		restful
　	Options:
　		Description:	RESTful Web service Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.restfulから変更)
	Developer Tools:	Spring Web Starter を追加

　(実行結果)
　
	>curl http://localhost:8080/messages
	[]
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#1\"}"  http://localhost:8080/messages
	{"text":"message#1"}
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#2\"}"  http://localhost:8080/messages
	{"text":"message#2"}
	>curl http://localhost:8080/messages
	[{"text":"message#1"},{"text":"message#2"}]

　(コメント)

	Spring Boot 2.1.5にバグがあり、STS上でpom.xmlの1行目がエラーとなる
	2.1.4にダウングレードして、Maven Update を実行

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	参考：https://stackoverflow.com/questions/56142369/why-am-i-getting-unknown-error-in-line-1-of-pom-xml


【13.2.2:画面遷移型アプリケーションの作成】

・(2019.06.08)thymeleaf

	<groupId>com.example</groupId>
	<artifactId>thymeleaf</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		thymeleaf
　	Options:
　		Description:	Thymeleaf Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.restfulから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf を追加


・(2019.06.09)静的ファイル

	<groupId>com.example</groupId>
	<artifactId>staticfile</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		staticfile
　	Options:
　		Description:	static file Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.staticfileから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf を追加

　（コメント）
　
　	application.propertiesにspring.resources.cache-periodプロパティーを設定すると、
　	以下のエラーとなる

	The elements [spring.resources.cache-period] were left unbound.

・(2019.06.09)メッセージの外部化

	<groupId>com.example</groupId>
	<artifactId>messages</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		messages
　	Options:
　		Description:	Messages Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.messagesから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf を追加


・(2019.06.09)Spring MVC の設定のカスタマイズ

	<groupId>com.example</groupId>
	<artifactId>viewcontroller</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		viewcontroller
　	Options:
　		Description:	View Controller Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.viewcontrollerから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf を追加


【13.3:Sprint Boot でデータアクセス】

【13.3.1:Spring JDBC】

・(2019.06.11)Spring JDBC for H2

	<groupId>com.example</groupId>
	<artifactId>JdbcH2</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		JdbcH2
　	Options:
　		Description:	JDBC for H2 Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.JdbcH2から変更)
	Developer Tools:	Spring Web Starter, JDBC API, H2 Database を追加

　(スキーマ設定：schema.sql）
　
	CREATE TABLE messages (
		id	INT PRIMARY KEY AUTO_INCREMENT,
		text VARCHAR(255)
	);
	
　(実行結果)
　
	>curl http://localhost:8080/messages
	[]
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#1\"}"  http://localhost:8080/messages
	{"text":"message#1"}
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#2\"}"  http://localhost:8080/messages
	{"text":"message#2"}
	>curl http://localhost:8080/messages
	[{"text":"message#1"},{"text":"message#2"}]


・(2019.06.12)Spring JDBC for PostgreSQL

	<groupId>com.example</groupId>
	<artifactId>JdbcPostgreSQL</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		JdbcPostgreSQL
　	Options:
　		Description:	JDBC for PostreSQL Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.JdbcPostgreSQLから変更)
	Developer Tools:	Spring Web Starter, JDBC API, PostgreSQL Driver を追加

　(スキーマ設定：schema.sql）
　
	CREATE TABLE IF NOT EXISTS messages (
		id	SERIAL PRIMARY KEY,
		text VARCHAR(255)
	);

　(データベース設定：application.properties）
　	
	spring.datasource.username=demo
	spring.datasource.password=demo
	spring.datasource.url=jdbc:postgresql://localhost:5432/sample		

　(データベースの準備)

	C:\books\springframework\ch13\13-3\JdbcPostgreSQL\src\main\resources>psql -U demo -d sample
	ユーザー demo のパスワード:demo
	psql (10.3)
	"help" でヘルプを表示します。

	sample=> \i schema.sql
	CREATE TABLE
	sample=> \dt
             リレーション一覧
	 スキーマ |    名前    |    型    | 所有者
	----------+------------+----------+--------
	 public   | account    | テーブル | demo
	 public   | equipment  | テーブル | demo
	 public   | messages   | テーブル | demo
	 public   | room       | テーブル | demo
	 public   | user_table | テーブル | demo
	(5 行)

　(実行結果)
　
	>curl http://localhost:8080/messages
	[]
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#1\"}"  http://localhost:8080/messages
	{"text":"message#1"}
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#2\"}"  http://localhost:8080/messages
	{"text":"message#2"}
	>curl http://localhost:8080/messages
	[{"text":"message#1"},{"text":"message#2"}]

　(データベースの確認）
　
	sample=> select * from messages;
	 id |   text
	----+-----------
	  1 | message#1
	  2 | message#2
	(2 行)


【13.3.2:Spring Data JPA】

・(2019.06.15)Spring Data JPA for H2

	<groupId>com.example</groupId>
	<artifactId>DataJpaH2</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		DataJpaH2
　	Options:
　		Description:	Spring data JPA for H2 Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.DataJpaH2から変更)
	Developer Tools:	Spring Web Starter, Spring Data JPA, H2 Database を追加

　(実行結果)
　
	>curl http://localhost:8080/messages
	[]
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#1\"}"  http://localhost:8080/messages
	{"id":1,"text":"message#1"}
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#2\"}"  http://localhost:8080/messages
	{"id":2,"text":"message#2"}
	>curl http://localhost:8080/messages
	[{"id":1,"text":"message#1"},{"id":2,"text":"message#2"}]

　(コメント)

	@Transactionalを使って、トランザクション制御を行っていないが、
	これは問題ないのか？


・(2019.06.15)Spring Data JPA for PostgreSQL

	<groupId>com.example</groupId>
	<artifactId>DataJpaPG</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		DataJpaPG
　	Options:
　		Description:	Spring data JPA for PostgreSQL Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.DataJpaPGから変更)
	Developer Tools:	Spring Web Starter, Spring Data JPA, PostgreSQL Driver を追加

　(application.propertiesの設定）
　
	spring.datasource.username=demo
	spring.datasource.password=demo
	spring.datasource.url=jdbc:postgresql://localhost:5432/sample

　(実行結果)

	・データベースの初期状態

	sample=> select * from messages ;
	 id |   text
	----+-----------
	  1 | message#1
	  2 | message#2
	(2 行)

	・コマンドウインドウからREST発行
	
	>curl http://localhost:8080/messages
	[{"id":1,"text":"message#1"},{"id":2,"text":"message#2"}]
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#3\"}"  http://localhost:8080/messages
	{"id":3,"text":"message#3"}
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#4\"}"  http://localhost:8080/messages
	{"id":4,"text":"message#4"}
	>curl http://localhost:8080/messages
	[{"id":1,"text":"message#1"},{"id":2,"text":"message#2"},{"id":3,"text":"message#3"},{"id":4,"text":"message#4"}]

	・データベースの最終状態
	
	sample=> select * from messages ;
	 id |   text
	----+-----------
	  1 | message#1
	  2 | message#2
	  3 | message#3
	  4 | message#4
	(4 行)
	　
　(コメント)

	@Transactionalを使って、トランザクション制御を行っていないが、
	これは問題ないのか？
	リポジトリのプロキシクラスがトランザクションを発行しているのかもしれない？？


【13.3.3:MyBatis】

・(2019.06.15)MyBatis for H2

	<groupId>com.example</groupId>
	<artifactId>MyBatisH2</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		MyBatisH2
　	Options:
　		Description:	MyBatis for H2 Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.MyBatisH2から変更)
	Developer Tools:	Spring Web Starter, MyBatis Framework, H2 Database を追加

　(スキーマ設定：schema.sql）
　
	CREATE TABLE messages (
		id	INT PRIMARY KEY AUTO_INCREMENT,
		text VARCHAR(255)
	);
	
　(実行結果)

	>curl http://localhost:8080/messages
	[]
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#1\"}"  http://localhost:8080/messages
	{"text":"message#1"}
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#2\"}"  http://localhost:8080/messages
	{"text":"message#2"}
	>curl http://localhost:8080/messages
	[{"text":"message#1"},{"text":"message#2"}]

　(コメント)

	@Transactionalを使って、トランザクション制御を行っていないが、
	これは問題ないのか？


・(2019.06.16) MyBatis for PostgreSQL

	<groupId>com.example</groupId>
	<artifactId>MyBatisPG</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		MyBatisPG
　	Options:
　		Description:	MyBatis for PostgreSQL Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.MyBatisPGから変更)
	Developer Tools:	Spring Web Starter, MyBatis Framework, PostgreSQL Driver を追加

　(application.propertiesの設定）
　
	spring.datasource.username=demo
	spring.datasource.password=demo
	spring.datasource.url=jdbc:postgresql://localhost:5432/sample

　(実行結果)

	・データベースの初期状態

	sample=> select * from messages ;
	 id |   text
	----+-----------
	  1 | message#1
	  2 | message#2
	  3 | message#3
	  4 | message#4
	(4 行)


	・コマンドウインドウからREST発行

	>curl http://localhost:8080/messages
	[{"text":"message#1"},{"text":"message#2"},{"text":"message#3"},{"text":"message#4"}]
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#5\"}"  http://localhost:8080/messages
	{"text":"message#5"}
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#6\"}"  http://localhost:8080/messages
	{"text":"message#6"}
	>curl http://localhost:8080/messages
	[{"text":"message#1"},{"text":"message#2"},{"text":"message#3"},{"text":"message#4"},{"text":"message#5"},{"text":"message#6"}]

	・データベースの最終状態
	
	sample=> select * from messages ;
	 id |   text
	----+-----------
	  1 | message#1
	  2 | message#2
	  3 | message#3
	  4 | message#4
	  5 | message#5
	  6 | message#6
	(6 行)

	　
　(コメント)

	@Transactionalを使って、トランザクション制御を行っていないが、
	これは問題ないのか？


【13.3.4:コネクションプールライブラリの変更】

・(2019.06.16)コネクションプールライブラリの変更：HikariCP

	<groupId>com.example</groupId>
	<artifactId>ConnectionPoolPG</artifactId>

　(spring initializerの設定)
　
　	Spring Boot:	2.1.5	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		ConnectionPoolPG
　	Options:
　		Description:	ConnectionPool for PostgreSQL Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.ConnectionPoolPGから変更)
	Developer Tools:	Spring Web Starter, JDBC API, PostgreSQL Driver を追加

　(スキーマ設定：schema.sql）
　
	CREATE TABLE IF NOT EXISTS messages (
		id	SERIAL PRIMARY KEY,
		text VARCHAR(255)
	);

　(application.properties）
　	
	spring.datasource.username=demo
	spring.datasource.password=demo
	spring.datasource.url=jdbc:postgresql://localhost:5432/sample		

	# プールサイズの設定
	spring.datasource.hikari.max-active=100 # 最大接続数
	spring.datasource.hikari.max-idle=8 # プールに保持しておく最大のコネクション数
	spring.datasource.hikari.min-idle=8 # プールに保持しておく最小のコネクション数
	spring.datasource.hikari.initial-size=10 # 初期サイズ
	#　コネクションが有効かどうかをプールから取得した際にチェックするかどうか
	spring.datasource.hikari.test-on-borrow=true
	# コネクションの有効性をチェックするためのクエリ
	spring.datasource.hikari.validation-query=SELECT 1

　(実行結果)

	・データベースの初期状態

	sample=> select * from messages ;
	 id |   text
	----+-----------
	  1 | message#1
	  2 | message#2
	  3 | message#3
	  4 | message#4
	  5 | message#5
	  6 | message#6
	(6 行)

	・コマンドウインドウからREST発行

	>curl http://localhost:8080/messages
	[{"text":"message#1"},{"text":"message#2"},{"text":"message#3"},{"text":"message#4"},{"text":"message#5"},{"text":"message#6"}]
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#7\"}"  http://localhost:8080/messages
	{"text":"message#7"}
	>curl -H "Content-type: application/json" -d "{\"text\":\"message#8\"}"  http://localhost:8080/messages
	{"text":"message#8"}
	>curl http://localhost:8080/messages
	[{"text":"message#1"},{"text":"message#2"},{"text":"message#3"},{"text":"message#4"},{"text":"message#5"},{"text":"message#6"},{"text":"message#7"},{"text":"message#8"}]

	・データベースの最終状態
	
	sample=> select * from messages ;
	 id |   text
	----+-----------
	  1 | message#1
	  2 | message#2
	  3 | message#3
	  4 | message#4
	  5 | message#5
	  6 | message#6
	  7 | message#7
	  8 | message#8
	(8 行)

	・最初のcurlコマンド実行時にコンソールから以下のログが出力

	2019-06-16 18:21:22.441  INFO 13464 --- [nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
	2019-06-16 18:21:22.581  INFO 13464 --- [nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.


【13.4:Spring Boot で Spring Security】

【13.4.1:Basic 認証】

・(2019.06.30)basic-auth

　	<groupId>com.example</groupId>
	<artifactId>basic-auth</artifactId>

	ベース：　13.2.2:thymeleaf
	
　(spring initializerの設定)
　
　	Spring Boot:	2.1.6 (後で,2.1.4に変更))
　	Group：			com.example
　	Artifict:		basic-auth
　	Options:
　		Description:	Basic auth Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.basic_authから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf, Spring Security を追加

　(application.properties）

	security.user.name=user
	security.user.password=demo
	security.user.role=USER,ADMIN
　
　(コメント)

	・Spring Boot のバージョン2.1.6は、pom.xmlでエラーが生じるので、
	　2.1.4にグレードダウン
	　
	・application.propertiesで、passwordを設定しても、有効にならない模様
	　（相変わらず、アプリケーションが出力するランダムなパスワードを使用する必要がある）

	
【13.4.2:認証・認可のカスタマイズ】

・(2019.06.30、2019.07.07)custom-auth

	<groupId>com.example</groupId>
	<artifactId>custom-auth</artifactId>

	ベース：　13.4.1:basic-auth, 9.4.2:form-login, 9.4.8:logout
	
　(spring initializerの設定)
　
　	Spring Boot:	2.1.6 (後で,2.1.4に変更))
　	Group：			com.example
　	Artifict:		custom-auth
　	Options:
　		Description:	Customized auth setting Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.custom_authから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf, Spring Security を追加


　(実行結果）
　
	/をGET⇒/login　認証入力⇒/　/helloをGET=>/hello　ログアウト=>/login?logout
	
　	Thymeleaf画面から認証情報（ユーザ名など）にアクセスする機能は未決

　（2019.07.07：コメント）
　
　	・welcomeページにusernameを表示（参照：9.4.11）
　	　HelloControllerを以下のように修正

		// 2019.07.07 change: see 9.4.11
		@RequestMapping("/")
		public String welcome(@AuthenticationPrincipal UserDetails userDetails, Model model) {
			String user = userDetails.getUsername();
			model.addAttribute("user", user);
			return "welcome";
		}
　	
　(コメント)
　
　	・設定ファイルWebSecurityConfigのOrderアノテーション指定で
　	SecurityProperties.ACCESS_OVERRIDE_ORDER定数がコンパイルエラー
　	
　	原因：
　		SecurityProperties.ACCESS_OVERRIDE_ORDERが消えている
　	参考：	
		SecurityProperties.ACCESS_OVERRIDE_ORDER disappeared
		https://modernjava.io/upgrading-to-spring-boot-2-0-my-experience/

		Error:
		error: cannot find symbol
		 @Order(SecurityProperties.ACCESS_OVERRIDE_ORDER)

		Solution:
		SecurityProperties no longer defines the ACCESS_OVERRIDE_ORDER constant 
		for the @Order annotation. However, Spring Boot no longer defines any 
		security details if the application does, so we do not need the @Order 
		annotation on the security @Configuration class and can be removed.
	
	・PasswordEncoderのBEAN定義がないと、実行時にエラーとなる

		There is no PasswordEncoder mapped for the id "null"

	・formLoing()で、.usernameParameter()　.passwordParameter()を明示的に
	　指定する必要がある
	　また、logout()では、ログアウト成功時の遷移画面、クッキーの削除などを
	　明示的に指定する必要がある
	　設定メソッドを以下のように記述

		@Override
		protected void configure(HttpSecurity http) throws Exception {
			http.formLogin()
					.loginPage("/login")
					.usernameParameter("username")
					.passwordParameter("password")
					.permitAll();
			http.logout()
					.logoutUrl("/logout")
					.permitAll()
					.logoutSuccessUrl("/login?logout")
					.deleteCookies("JSESSIONID")
					.invalidateHttpSession(true);
			http.authorizeRequests().anyRequest().authenticated();
		}

	参考：
		Spring BootとSpring Securityでユーザ認証(インメモリ＆独自のユーザテーブル)
		https://www.memory-lovers.blog/entry/2016/05/15/142600

		Spring BootでSpring SecurityのCSRF対策を使う
		https://qiita.com/nenokido2000/items/22a97a26a5858ddb164f


	・ログインエラーメッセージへの参照
	
		JSPと異なり、${SPRING_SECURITY_LAST_EXCEPTION}　にダイレクトにアクセスする
		ことができない
		ログイン画面では以下のように記述する

		<div th:if="${session['SPRING_SECURITY_LAST_EXCEPTION'] != null}">
			<span style="color: red;" th:text="${session['SPRING_SECURITY_LAST_EXCEPTION'].message}">
			</span>
		</div>


・(2019.07.03)dao-auth

	<groupId>com.example</groupId>
	<artifactId>dao-auth</artifactId>

	ベース：　13.4.2:custom-auth, 13.3.1:JdbcH2、9.4.5:dao-authentication-provider
	
　(spring initializerの設定)
　
　	Spring Boot:	2.1.6 (後で,2.1.4に変更))
　	Group：			com.example
　	Artifict:		dao-auth
　	Options:
　		Description:	Dao authentication Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.dao_authから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf, Spring Security, 
						H2 Database, JDBC API を追加


　(実行結果）
　
	/をGET⇒/login　認証入力⇒/　/helloをGET=>/hello　ログアウト=>/login?logout
	
　	Thymeleaf画面から認証情報（ユーザ名など）にアクセスする機能は未決
　	
　(コメント)
　
　	・データベーススクリプトの名称は、以下のようにする
　		schema.sql	スキーマ
　		data.sql	初期データ


【13.5:Spring Boot で型安全なプロパティ設定】

・(2019.07.03)property-injection

	<groupId>com.example</groupId>
	<artifactId>property-injection</artifactId>

  ベース：13.2.2:thymleaf
  
　(spring initializerの設定)
　
　	Spring Boot:	2.1.6	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		property-injection
　	Options:
　		Description:	property injection Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.property-injectionから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf を追加


【13.5.1:@ConfigurationProperties を用いたプロパティの設定】

・(2019.07.03)@ConfigurationProperties

	<groupId>com.example</groupId>
	<artifactId>configurationproperties</artifactId>

  ベース：13.5:property-injection
  
　(spring initializerの設定)
　
　	Spring Boot:	2.1.6	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		configurationproperties
　	Options:
　		Description:	@ConfigurationProperties Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.configurationpropertiesから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf を追加

　(コメント)
　
　	・pom.xmlの依存関係にspring-boot-configuration-processorを追加
　	　spring-configuration-metadata.jsonファイルは作成されたが、
　	　IDEの補完は効かない


・(2019.07.03)@Bean @ConfigurationProperties

	<groupId>com.example</groupId>
	<artifactId>bean-properties</artifactId>

  ベース：13.5.1:configurationproperties
  
　(spring initializerの設定)
　
　	Spring Boot:	2.1.6	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		bean-properties
　	Options:
　		Description:	Bean ConfigurationProperties Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.bean-propertiesから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf を追加

　(コメント)
　
	@BeanメソッドでDI登録したクラスは、再度@Autowiredで参照して使わないと
	プロパティーが設定されない
	
		@Component
		public class HelloService {

			@Autowired
			TargetProperties targetProperties;
	
			public String hello() {
				String target = "http://" + targetProperties.getHost() 
								+ ":" + targetProperties.getPort();
				return target;
			}
	
			@Bean
			@ConfigurationProperties(prefix = "target")
			public TargetProperties targetProperties() {
				return new TargetProperties();
			}
		}
	
	ここで、hello()メソッド内から、targetProperties().getHost()と
	直接Beanメソッドを呼び出すと、hostプロパティが設定されていない


【13.5.2:Bean Validation によるプロパティ値のチェック】

・(2019.07.03)Bean Validation for @ConfigurationProperties

	<groupId>com.example</groupId>
	<artifactId>bean-validation</artifactId>

  ベース：13.5.1:configurationproperties
  
　(spring initializerの設定)
　
　	Spring Boot:	2.1.6	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		bean-validation
　	Options:
　		Description:	Bean Validation Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.bean-validationから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf を追加

　(コメント)
　
　	・Bean Validation をかけるプロパティクラスには、＠Validatedアノテーションを
　	付与する必要がある

		@Component
		@ConfigurationProperties(prefix = "target")
		// 2019.07.03 add. 
		// see https://www.logicbig.com/tutorials/spring-framework/spring-boot/configuration-properties-validation.html 
		@Validated
		public class TargetProperties {
			@NotEmpty
			private String host;
			@Min(1)
			@Max(65535)
			private int port;
			・・・

【13.6:Spring Boot Actuator で運用機能強化】
【13.6.1:HTTPエンドポイントの追加】

・(2019.07.06)HTTPエンドポイント

	<groupId>com.example</groupId>
	<artifactId>endpoints</artifactId>

  ベース：13.5.1:configurationproperties
  
　(spring initializerの設定)
　
　	Spring Boot:	2.1.6	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		endpoints
　	Options:
　		Description:	Actuator endpoints Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.endpointsから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf, Spring Boot Actuator を追加


　(コメント)
　
　	・全エンドポイント開放
　	
　		参照：https://xn--fhqq99a3lb.jp/374
　	
　		application.propertiesに対してエンドポイントの全開放と
　		shutdownエンドポイントの有効化を設定します。

		application.properties:
	
			management.endpoints.web.exposure.include=*
			management.endpoint.shutdown.enabled=true
　	
　	・ActuatorのURLは、https://localhost:8080/actuator
　	
　		参照：https://stackoverflow.com/questions/55877188/spring-boot-actuator-returns-404-not-found
　	
	・ポートコンテキストパスの変更
	
		Boot　2.XXではポートとコンテキストパスの変更は、以下のように行う

			management.server.port=8081
			management.server.servlet.context-path=/manage

		また、パスのプリフィックスは以下のように行う
		
			management.endpoints.web.base-path=/manage

　（実行結果）
　
　	・http://localhost:8080/actuator/
　	
　	{"_links":{
　		"self":{"href":"http://localhost:8080/actuator","templated":false},
　		"auditevents":{"href":"http://localhost:8080/actuator/auditevents","templated":false},
　		"beans":{"href":"http://localhost:8080/actuator/beans","templated":false},
　		"caches-cache":{"href":"http://localhost:8080/actuator/caches/{cache}","templated":true},
　		"caches":{"href":"http://localhost:8080/actuator/caches","templated":false},
　		"health":{"href":"http://localhost:8080/actuator/health","templated":false},
　		"health-component-instance":{"href":"http://localhost:8080/actuator/health/{component}/{instance}",
　			"templated":true},
		"health-component":{"href":"http://localhost:8080/actuator/health/{component}","templated":true},
		"conditions":{"href":"http://localhost:8080/actuator/conditions","templated":false},
		"shutdown":{"href":"http://localhost:8080/actuator/shutdown","templated":false},
		"configprops":{"href":"http://localhost:8080/actuator/configprops","templated":false},
		"env":{"href":"http://localhost:8080/actuator/env","templated":false},
		"env-toMatch":{"href":"http://localhost:8080/actuator/env/{toMatch}","templated":true},
		"info":{"href":"http://localhost:8080/actuator/info","templated":false},
		"loggers":{"href":"http://localhost:8080/actuator/loggers","templated":false},
		"loggers-name":{"href":"http://localhost:8080/actuator/loggers/{name}","templated":true},
		"heapdump":{"href":"http://localhost:8080/actuator/heapdump","templated":false},
		"threaddump":{"href":"http://localhost:8080/actuator/threaddump","templated":false},
		"metrics-requiredMetricName":{"href":"http://localhost:8080/actuator/metrics/{requiredMetricName}",
			"templated":true},
		"metrics":{"href":"http://localhost:8080/actuator/metrics","templated":false},
		"scheduledtasks":{"href":"http://localhost:8080/actuator/scheduledtasks","templated":false},
		"httptrace":{"href":"http://localhost:8080/actuator/httptrace","templated":false},
		"mappings":{"href":"http://localhost:8080/actuator/mappings","templated":false}
		}
	}

	・http://localhost:8080/actuator/auditevents
	
	{"events":[]}
	
	・http://localhost:8080/actuator/beans
	
		(ch13-6-actuator_beans.txt)
	
	・http://localhost:8080/actuator/env
	
	（大量のレポート）
	
	・http://localhost:8080/actuator/info
	
	{}
	
	・http://localhost:8080/actuator/loggers
	
	（大量のレポート）
	
	・http://localhost:8080/actuator/heapdump
	
		バイナリファイルが添付される
	
	・http://localhost:8080/actuator/threaddump
	
	(大量のレポート)
	
	・http://localhost:8080/actuator/metrics
	
	{"names":["jvm.threads.states","jvm.gc.pause","http.server.requests","jvm.gc.memory.promoted",
		"jvm.memory.committed","jvm.memory.used","jvm.gc.max.data.size","system.cpu.count","logback.events",
		"tomcat.global.sent","jvm.buffer.memory.used","tomcat.sessions.created","jvm.memory.max",
		"jvm.threads.daemon","system.cpu.usage","jvm.gc.memory.allocated","tomcat.global.request.max",
		"tomcat.global.request","tomcat.sessions.expired","jvm.threads.live","jvm.threads.peak",
		"tomcat.global.received","process.uptime","tomcat.sessions.rejected","process.cpu.usage",
		"tomcat.threads.config.max","jvm.classes.loaded","jvm.classes.unloaded","tomcat.global.error",
		"tomcat.sessions.active.current","tomcat.sessions.alive.max","jvm.gc.live.data.size",
		"tomcat.threads.current","jvm.buffer.count","jvm.buffer.total.capacity","tomcat.sessions.active.max",
		"tomcat.threads.busy","process.start.time"]}
	
	・http://localhost:8080/actuator/metrics/jvm.memory.committed
	
	{"name":"jvm.memory.committed",
		"description":"The amount of memory in bytes that is committed for the Java virtual machine to use",
		"baseUnit":"bytes",
		"measurements":[{"statistic":"VALUE","value":7.5399168E7}],
		"availableTags":[{"tag":"area","values":["heap","nonheap"]},
			{"tag":"id","values":["Survivor Space","Eden Space","Metaspace","Tenured Gen","Code Cache"]}]}

	・http://localhost:8080/actuator/scheduledtasks
	
	{"cron":[],"fixedDelay":[],"fixedRate":[],"custom":[]}
	
	・http://localhost:8080/actuator/httptrace
	
	(大量のレポート)
	
	・http://localhost:8080/actuator/mappings
	
	(大量のレポート)


【13.6.2:ヘルスチェック】

・(2019.07.06)ヘルスチェック

	<groupId>com.example</groupId>
	<artifactId>healthcheck</artifactId>

  ベース：13.6.1:endpoints
  
　(spring initializerの設定)
　
　	Spring Boot:	2.1.6	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		healthcheck
　	Options:
　		Description:	Actuator health check Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.healthcheckから変更)
	Developer Tools:	Spring Web Starter, JDBC API, PostgreSQL Driver, Spring Boot Actuator を追加


　(コメント)

	・healthの詳細を出力するためには、以下をapplication.propertiesに設定する
	参照：https://www.callicoder.com/spring-boot-actuator/
	
		# HEALTH ENDPOINT
		management.endpoint.health.show-details=always

　（実行結果）
　
　
　	・http://localhost:8080/messages
　	
　	[{"text":"message#1"},{"text":"message#2"},{"text":"message#3"},{"text":"message#4"},
　	　{"text":"message#5"},{"text":"message#6"},{"text":"message#7"},{"text":"message#8"}]
　	
	・http://localhost:8080/actuator/health
	
	{
		"status":"DOWN",
		"details":{
			"random":{
				"status":"DOWN",
				"details":{
					"error_code":100
				}
			},
			"db":{
				"status":"UP",
				"details":{
					"database":"PostgreSQL",
					"hello":1
				}
			},
			"diskSpace":{
				"status":"UP",
				"details":{
					"total":487412723712,
					"free":87025569792,
					"threshold":10485760
				}
			}
		}
	}


【13.6.3:メトリックス】

・(2019.07.06)ヘルスチェック

	<groupId>com.example</groupId>
	<artifactId>metrics</artifactId>
	
  ベース：13.2.2:thymeleaf
  
　(spring initializerの設定)
　
　	Spring Boot:	2.1.6	(後で、STS上で2.1.4に変更）
　	Group：			com.example
　	Artifict:		metrics
　	Options:
　		Description:	Actuator metrics Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.metricsから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf, Spring Boot Actuator を追加


　(コメント)

	・metricsをactuator出力に含めるため、以下をapplication.propertiesに設定する
	参照：https://www.callicoder.com/spring-boot-actuator/
	
		# Use "*" to expose all endpoints, or a comma-separated list to expose selected ones
		management.endpoints.web.exposure.include=health,info,metrics 

	・CounterServiceは廃止となり、代わりにMeterRegistryを使用する
	参照：https://k11i.biz/blog/2018/03/24/spring-boot-with-micrometer/

		@Service
		public class HelloService {

			Counter helloCounter;
	
			@Autowired
			public HelloService(MeterRegistry meterRegistry) {
				helloCounter = meterRegistry.counter("hello.invoked");
			}
	
			public void hello() {
				this.helloCounter.increment();
			}
		}

	・/actuator/metricsでは、メトリックス名の一覧が出力される。
	メトリックス値を出力するには、/actuator/metrics/{matrixName}とする
	参照：https://www.callicoder.com/spring-boot-actuator/
	
	
　（実行結果）
　
	・http://localhost:8080/hello
	
		Hello Actuator Metrics!

	・http://localhost:8080/actuator/
	
		{
			"_links":{
				"self":{
					"href":"http://localhost:8080/actuator",
					"templated":false
				},
				"health":{
					"href":"http://localhost:8080/actuator/health",
					"templated":false
				},
				"health-component":{
					"href":"http://localhost:8080/actuator/health/{component}",
					"templated":true
				},
				"health-component-instance":{
					"href":"http://localhost:8080/actuator/health/{component}/{instance}",
					"templated":true
				},
				"info":{
					"href":"http://localhost:8080/actuator/info",
					"templated":false
				},
				"metrics":{
					"href":"http://localhost:8080/actuator/metrics",
					"templated":false
				},
				"metrics-requiredMetricName":{
					"href":"http://localhost:8080/actuator/metrics/{requiredMetricName}",
					"templated":true
				}
			}
		}
	
	
	・http://localhost:8080/actuator/metrics
	
		{
			"names":[
				"jvm.threads.states","jvm.gc.memory.promoted","http.server.requests",
				"jvm.memory.committed","hello.invoked","jvm.memory.used",
				"jvm.gc.max.data.size","system.cpu.count","logback.events",
				"tomcat.global.sent","jvm.buffer.memory.used","tomcat.sessions.created",
				"jvm.memory.max","jvm.threads.daemon","system.cpu.usage",
				"jvm.gc.memory.allocated","tomcat.global.request.max",
				"tomcat.global.request","tomcat.sessions.expired","jvm.threads.live",
				"jvm.threads.peak","tomcat.global.received","process.uptime",
				"tomcat.sessions.rejected","process.cpu.usage",
				"tomcat.threads.config.max","jvm.classes.loaded","jvm.gc.pause",
				"jvm.classes.unloaded","tomcat.global.error",
				"tomcat.sessions.active.current","tomcat.sessions.alive.max",
				"jvm.gc.live.data.size","tomcat.threads.current","jvm.buffer.count",
				"jvm.buffer.total.capacity","tomcat.sessions.active.max",
				"tomcat.threads.busy","process.start.time"
			]
		}
	
		
	・http://localhost:8080/actuator/metrics/hello.invoked
	
	
		{
			"name":"hello.invoked",
			"description":null,
			"baseUnit":null,
			"measurements":[
				{
					"statistic":"COUNT",
					"value":1.0
				}
			],
			"availableTags":[]
		}


【13.6.4:セキュリティの有効化】

・(2019.07.07)enable-security

	<groupId>com.example</groupId>
	<artifactId>enable-security</artifactId>

	ベース：　13.4.2:custom-auth
	
　(spring initializerの設定)
　
　	Spring Boot:	2.1.6 (後で,2.1.4に変更))
　	Group：			com.example
　	Artifict:		enable-security
　	Options:
　		Description:	Actuator security Demo project for Spring Boot
　		Packege Name:	com.example (デフォルトのcom.example.enable-securityから変更)
	Developer Tools:	Spring Web Starter, Thymeleaf, Spring Security, Spring Boot Actuator を追加


　(コメント)
　
　	・management.security.enabled や management.security.roles の制御は廃止され、
　	代わりに、WebSecurityConfigurerAdapter　に明示的に制定する必要がある
　	
　	参考：https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-Security-2.0
　	
	@Configuration
	public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

		// see https://qiita.com/nenokido2000/items/22a97a26a5858ddb164f
		@Override
		protected void configure(HttpSecurity http) throws Exception {
			http.formLogin()
					.loginPage("/login")
					.usernameParameter("username")
					.passwordParameter("password")
					.permitAll();
			http.logout()
					.logoutUrl("/logout")
					.permitAll()
					.logoutSuccessUrl("/login?logout")
					.deleteCookies("JSESSIONID")
					.invalidateHttpSession(true);
		
			// 2019.07.07 change
			// see https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-Security-2.0
			http.authorizeRequests()
				.requestMatchers(EndpointRequest.toAnyEndpoint()).hasRole("ADMIN")
				.anyRequest().authenticated();
		}
		・・・

　(実行結果）
　
	/をGET⇒/login　USERで認証⇒/　/actuatorをGET=>エラーページ　/をGET⇒/　ログアウト
	/をGET⇒/login　ADMINで認証⇒/　/actuatorをGET⇒/actuator
	
	