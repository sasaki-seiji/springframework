【7.1:HTTPセッションの利用】

【7.1.1:セッション属性（＠SessionAttributes】

・(2018.07.18)＠SessionAttributes

  <groupId>example</groupId>
  <artifactId>sessionattributes</artifactId>

（コメント）
	5.8.5:redirect-addflashattribute をベースに作成

【7.1.2:セッションスコープBean】

参照：
	JSTL coreタグライブラリの利用
	https://qiita.com/sculptcat/items/53d1a3a2d3b973354085
	
	HTMLクイックリファレンス
	http://www.htmq.com/

・(2018.07.22)セッションスコープのBean定義（Componentスキャン）

  <groupId>example</groupId>
  <artifactId>sessionscopedbean-component</artifactId>

・(2018.07.22)セッションスコープのBean定義（Java Config）

  <groupId>example</groupId>
  <artifactId>sessionscopedbean-javaconf</artifactId>

・(2018.07.22)セッションスコープのBean定義（XML Config）

	(コメント)XMLの設定は、4.2.7:XMLファイルを使用したBean定義（firstapp-xml）を参照

  <groupId>example</groupId>
  <artifactId>sessionscopedbean-xmlconf</artifactId>


【7.2:ファイルアップロード】

参考：
	4.9. ファイルアップロード
	http://terasolunaorg.github.io/guideline/5.4.1.RELEASE/ja/ArchitectureInDetail/WebApplicationDetail/FileUpload.html

	org.springframework.web.multipart
	Interface MultipartFile
	https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/multipart/MultipartFile.html
・(2018.07.23、2018.07.24)ファイルアップロード（Java Config）

  <groupId>example</groupId>
  <artifactId>fileupload-javaconf</artifactId>

	(コメント)
		テンポラリディレクトリにアップロードファイルを保存
		（C:\Users\sasaki\AppData\Local\Temp）
		
・(2018.07.24)ファイルアップロード（XML Config）

  <groupId>example</groupId>
  <artifactId>fileupload-xmlconf</artifactId>

	(コメント)
		XMLの設定は、4.2.7:XMLファイルを使用したBean定義（firstapp-xml）を参照

		テンポラリディレクトリにアップロードファイルを保存
		（C:\Users\sasaki\AppData\Local\Temp）
		
・(2018.07.26)MultipartException

  <groupId>example</groupId>
  <artifactId>multipartexception</artifactId>

	(コメント)
		STS内のブラウザにはエラーページが表示されない。
		動作確認には、外部のブラウザを使うこと


【7.3:非同期処理】

参考：
	Spring MVC(+Spring Boot)上での非同期リクエストを理解する
	https://qiita.com/kazuki43zoo/items/ce88dea403c596249e8a
	https://qiita.com/kazuki43zoo/items/53b79fe91c41cc5c2e59

・（2018.07.27）HandlerからCallableを返却
　　(2018.07.28）疑似エラー機能を追加
	
  <groupId>example</groupId>
  <artifactId>callable</artifactId>

・(2018.07.28)HandlerからCallableを返却、ThreadPoolTaskExecutorを使用

  <groupId>example</groupId>
  <artifactId>callable-taskexecutor</artifactId>

	(コメント)
		テキストの記述と異なり、TaskExecutorの型はAsyncTaskExecutorとする必要がある
		
		@Bean
		// 2018.07.28 change TaskExecutor to AsyncTaskExecutor
		public AsyncTaskExecutor mvcTaskExecutor() {
			ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
			executor.setCorePoolSize(5);
			executor.setMaxPoolSize(10);
			executor.setQueueCapacity(25);
			return executor;
		}
		

・(2018.07.28)HandlerからCallableを返却、ThreadPoolTaskExecutorを使用、XML-config

  <groupId>example</groupId>
  <artifactId>callable-taskexecutor-xmlconf</artifactId>

	（コメント）
		・テキストの記述にはないが、XMLでスレッドプールを使用するためには、
		名前空間taskの指定が必要
		
		<beans xmlns="http://www.springframework.org/schema/beans"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xmlns:mvc="http://www.springframework.org/schema/mvc"
			xmlns:task="http://www.springframework.org/schema/task"
			xmlns:context="http://www.springframework.org/schema/context"
			xsi:schemaLocation="
				http://www.springframework.org/schema/beans
				http://www.springframework.org/schema/beans/spring-beans.xsd
				http://www.springframework.org/schema/mvc
				http://www.springframework.org/schema/mvc/spring-mvc.xsd
				http://www.springframework.org/schema/task
				http://www.springframework.org/schema/task/spring-task.xsd
				http://www.springframework.org/schema/context
				http://www.springframework.org/schema/context/spring-context.xsd">

			・・・
	
			<task:executor id="mvcTaskExecutor" pool-size="5-10" queue-capacity="25" />
			<mvc:annotation-driven>
				<mvc:async-support task-executor="mvcTaskExecutor" />
			</mvc:annotation-driven>
		</beans>
		
		・mvc:async-support タグには、default-timeout属性の指定が必須
		　（これがないと、起動時にエラーとなる）
		　
		<task:executor id="mvcTaskExecutor" pool-size="5-10" queue-capacity="25" />
		<mvc:annotation-driven>
			<mvc:async-support default-timeout="5000" task-executor="mvcTaskExecutor" />
		</mvc:annotation-driven>
		

・(2018.07.28)HandlerからDeferredResultを返却、@Asnynによる非同期処理
　（2018.07.29）例外をキャッチし、その例外でsetErrorResult()をコールするように変更
　
  <groupId>example</groupId>
  <artifactId>deferredresult</artifactId>

	(コメント)
		＠EnableAsyncは、アプリケーションのConfigではなく、WebMVCのConfigに設定する
		必要がある(理由は不明)

		@Configuration
		@EnableAsync	// 2018.07.28 add
		@EnableWebMvc
		@ComponentScan("example.app")
		public class WebMvcConfig implements WebMvcConfigurer {
			・・・
		}

・(2018.07.28)HandlerからDeferredResultを返却、@Asnynによる非同期処理、XML-cnfig
　（2018.07.29）例外をキャッチし、その例外でsetErrorResult()をコールするように変更

  <groupId>example</groupId>
  <artifactId>deferredresult-xmlconf</artifactId>

・(2018.07.28)CompletableFutureを使用した非同期処理

  <groupId>example</groupId>
  <artifactId>completablefuture</artifactId>


・(2018.07.29)SseEmitterを使用したPUSH型の非同期処理

  <groupId>example</groupId>
  <artifactId>sseemitter</artifactId>

	(出力結果）
	
	Chrome：

		id:321af8bb-2e8b-4761-b708-950c64d029cc
		data:Good Morning!

		id:8fde523e-0218-49da-83d7-c7e236f84715
		data:Hello!

		id:cee5cb1a-17ed-48f0-855b-4e9addf0f1ed
		data:Good Night!
		
	>curl -D - http://localhost:8080/sseemitter/greeting

		HTTP/1.1 200
		Content-Type: text/event-stream;charset=UTF-8
		Transfer-Encoding: chunked
		Date: Sat, 28 Jul 2018 22:06:58 GMT

		id:2aa8c5ea-3052-421e-a031-015ba98aa1ae
		data:Good Morning!

		id:e10cfa45-2c0e-4ffd-8981-f4c0e3d6e066
		data:Hello!

		id:fadffe33-909b-4718-98c9-7c21c0646da8
		data:Good Night!

	(コメント)
	
		STSのブラウザ、Microsoft Edge からは出力されない
		
【7.3.5:非同期実行に対する共通処理の実装】

・（2018.07.30）CallableProcessingInterceptor

  <groupId>example</groupId>
  <artifactId>callableprocessinginterceptor</artifactId>

	（コメント）
	
		CallableProcessingInterceptorAdapter はdeprecatedとなっている
		代わりに、CallableProcessingInterceptorを実装する


・（2018.07.30）DeferredResultProcessingInterceptor

  <groupId>example</groupId>
  <artifactId>deferredresultprocessinginterceptor</artifactId>

	（コメント）
	
		・DeferredResultProcessingInterceptorAdapter はdeprecatedとなっている
		代わりに、DeferredResultProcessingInterceptorを実装する

		・TaskExecuterのBean定義は、WebMvcConfigに記載する必要がる
		（そうでないと、Bean定義が認識されない）

【7.4:共通処理の実装】

【7.4.1:サーブレットフィルタの利用】

参考：
	7.1. ロギング
	http://terasolunaorg.github.io/guideline/5.4.1.RELEASE/ja/ArchitectureInDetail/GeneralFuncDetail/Logging.html


・（2018.08.01、2018.08.02）MDC put filter (remoteIp)

  <groupId>example</groupId>
  <artifactId>mdcputremoteip</artifactId>

・（2018.08.02）DIコンテナで管理しているBeanのインジェクション

  <groupId>example</groupId>
  <artifactId>mdcputfilterusingbean</artifactId>

【7.4.2:HandlerInterceptorの利用】

・（2018.08.03）HandlerInterceptor(Java-config)

  <groupId>example</groupId>
  <artifactId>handlerinterceptor</artifactId>

・（2018.08.03）HandlerInterceptor(XML-config)

  <groupId>example</groupId>
  <artifactId>handlerinterceptor-xmlconf</artifactId>


【7.4.3:@ControllerAdviceの利用】

・（2018.08.04）ControllerAdvice

  <groupId>example</groupId>
  <artifactId>controlleradvice</artifactId>

	(コメント)
		STSのブラウザからはシステムエラーを処理できない。
		代わりに、microsoft edge を利用

【7.4.4:HandlerMethodArgumentResolverの利用】

・（2018.08.04）HandlerMethodArgumentResolver

  <groupId>example</groupId>
  <artifactId>handlermethodargumentresolver</artifactId>


	(コメント)
	
		supportsParameterによるメソッド引数判定にて、CommonRequestDataクラスの
		派生クラスまで許容してしまう。
		派生クラスの場合、resolveArgumentの戻り値がCommonRequestDataを参照するので、
		InvalidCastExceptionを発生する

		@Override
		public boolean supportsParameter(MethodParameter parameter) {
			// 2018.08.04 change
			//return CommonRequestData.class.isAssignableFrom(parameter.getParameterType());
			return CommonRequestData.class.equals(parameter.getParameterType());
		}

・（2018.08.04）HandlerMethodArgumentResolver (XML-config)

  <groupId>example</groupId>
  <artifactId>handlermethodargumentresolver-xmlconf</artifactId>


【7.5:静的リソース】


【7.5.1:デフォルトサーブレットとDispatcherServletの共有】

・（2018.08.04）デフォルトサーブレットとDispatcherServletの共有

  <groupId>example</groupId>
  <artifactId>defaultservlet</artifactId>

	（コメント）
		CSSファイルのurl関数では、コンテキストパスを含めた指定が必要

		body {
			background-image: url("/defaultservlet/static/images/body-background.jpg");
		}

・（2018.08.05）デフォルトサーブレットとDispatcherServletの共有（XML-config）

  <groupId>example</groupId>
  <artifactId>defaultservlet-xmlconf</artifactId>


【7.5.2:Spring MVC独自の静的リソース解決の仕組み】

・(2018.08.05）任意のディレクトリに格納されているファイルへのアクセス

  <groupId>example</groupId>
  <artifactId>resourcehttprequesthandler</artifactId>

・(2018.08.05）任意のディレクトリに格納されているファイルへのアクセス(XML-config）

  <groupId>example</groupId>
  <artifactId>resourcehttprequesthandler-xmlconf</artifactId>

・(2018.08.05）HTTPのキャッシュ制御

  <groupId>example</groupId>
  <artifactId>cache-control</artifactId>

・(2018.08.05）HTTPのキャッシュ制御(XML-config）

  <groupId>example</groupId>
  <artifactId>cache-control-xmlconf</artifactId>

・(2018.08.05）バージョン付きの公開パスを使用した静的リソースへのアクセス

  <groupId>example</groupId>
  <artifactId>versionresourceresolver</artifactId>

	（コメント）
		CSSファイル内のurl（）中のパスにバージョニングがされていない

【7.6:国際化】

【7.6.2:ロケールの利用】

・（2018.08.07）AcceptHeaderLocaleResolver

  <groupId>example</groupId>
  <artifactId>acceptheaderlocaleresolver</artifactId>

	（コメント）
	
		・cromeから英語を第一優先にして実験
		・コードサンプルは、5.12.2:ロケール別のメッセージ出力をベース

【7.6.3:UIを利用したロケールの切り替え】

・（2018.08.08）UIを利用したロケールの切り替え

  <groupId>example</groupId>
  <artifactId>cookielocaleresolver</artifactId>

		