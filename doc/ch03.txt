【3.1:Springによるデータアクセス】

【3.1.2:データソースのコンフィギュレーション】

・(2018.04.23)アプリケーション定義のデータソース（Java-config）

  <groupId>example.datasource</groupId>
  <artifactId>postgres</artifactId>

　(データベース設定)
　	データベース：sample
　	ユーザ名：demo
　	パスワード：demo
　	
・(2018.04.23)アプリケーション定義のデータソース（XML-config）

  <groupId>example.datasource</groupId>
  <artifactId>postgres-xml</artifactId>
　	
・（2018.04.15）組み込みデータソース（Java-config)

  <groupId>example.datasource</groupId>
  <artifactId>embedded-db</artifactId>

・（2018.04.15）組み込みデータソース（XML-config)

  <groupId>example.datasource</groupId>
  <artifactId>embedded-db-xml</artifactId>


【3.2:Spring　JDBC】

【3.2.2:JdbcTemplateクラスを利用したCRUD操作】

・（2018.04.15）JdbcTemplateを使用したデータアクセス

  <groupId>example.jdbc</groupId>
  <artifactId>jdbctemplate</artifactId>

・（2018.04.23）JdbcTemplateを使用したデータアクセス（PostgreSQL）

  <groupId>example.jdbc</groupId>
  <artifactId>jdbctemplate-pg</artifactId>

　(データベース設定)
　	データベース：sample
　	テーブル：user_table
　	ユーザ名：demo
　	パスワード：demo

・（2018.04.15）Java標準データ型による1項目の取得

  <groupId>example.jdbc</groupId>
  <artifactId>queryforobject</artifactId>

　(データベース設定)
　	データベース：sample
　	テーブル：room, equipment
　	ユーザ名：demo
　	パスワード：demo

・（2018.04.24）Java標準データ型による1項目の取得(PostgreSQL)

  <groupId>example.jdbc</groupId>
  <artifactId>queryforobject-pg</artifactId>


・（2018.04.15）バインド変数を利用したSQL

  <groupId>example.jdbc</groupId>
  <artifactId>bindparam</artifactId>

・（2018.04.25）バインド変数を利用したSQL(PostgreSQL)

  <groupId>example.jdbc</groupId>
  <artifactId>bindparam-pg</artifactId>


・（2018.04.15）名前付きバインド変数を利用したSQL

  <groupId>example.jdbc</groupId>
  <artifactId>named-bindparam</artifactId>

・（2018.04.25）名前付きバインド変数を利用したSQL(PostgreSQL)

  <groupId>example.jdbc</groupId>
  <artifactId>named-bindparam-pg</artifactId>

・（2018.04.15）MapSqlParameterSource

  <groupId>example.jdbc</groupId>
  <artifactId>mapsqlparametersource</artifactId>

・（2018.04.25）MapSqlParameterSource(PostgreSQL)

  <groupId>example.jdbc</groupId>
  <artifactId>mapsqlparametersource-pg</artifactId>

・（2018.04.15）BeanPropertySqlParameterSource

  <groupId>example.jdbc</groupId>
  <artifactId>beanpropertysqlparametersource</artifactId>

・（2018.04.25）BeanPropertySqlParameterSource(PostgreSQL)

  <groupId>example.jdbc</groupId>
  <artifactId>beanpropertysqlparametersource-pg</artifactId>

・（2018.04.15）1行の検索結果を取得

  <groupId>example.jdbc</groupId>
  <artifactId>queryformap</artifactId>

・（2018.04.25）1行の検索結果を取得(PostgreSQL)

  <groupId>example.jdbc</groupId>
  <artifactId>queryformap-pg</artifactId>

・（2018.04.15）複数行の検索結果を取得

  <groupId>example.jdbc</groupId>
  <artifactId>queryforlist</artifactId>

・（2018.04.25）複数行の検索結果を取得

  <groupId>example.jdbc</groupId>
  <artifactId>queryforlist-pg</artifactId>

・（2018.04.16）テーブルを更新する処理

  <groupId>example.jdbc</groupId>
  <artifactId>update</artifactId>

・（2018.04.26）テーブルを更新する処理(PostgreSQL)

  <groupId>example.jdbc</groupId>
  <artifactId>update-pg</artifactId>

　(コメント）
　	INSERT/UPDATE/DELETEを完了させるために、トランザクションをコミットさせなければならない
　	
【3.2.3:取得結果の変換処理】

・（2018.04.17）RowMapperの実装

  <groupId>example.jdbc</groupId>
  <artifactId>rowmapper</artifactId>

・（2018.04.26）RowMapperの実装

  <groupId>example.jdbc</groupId>
  <artifactId>rowmapper-pg</artifactId>

・（2018.04.17）ラムダ式を利用したRowMapperの実装

  <groupId>example.jdbc</groupId>
  <artifactId>rowmapper-lambda</artifactId>

・（2018.04.17）BeanPropertyRowMapperを利用したDaoクラスの実装

  <groupId>example.jdbc</groupId>
  <artifactId>beanpropertyrowmapper</artifactId>

・（2018.04.17）ResultSetExtractor

  <groupId>example.jdbc</groupId>
  <artifactId>resultsetextractor</artifactId>

・（2018.04.18）RowCallbackHandler

  <groupId>example.jdbc</groupId>
  <artifactId>rowcallbackhandler</artifactId>

【3.3:トランザクション管理】

【3.3.2:宣言的トランザクション】

・（2018.04.21, 2018.04.22）＠Transactionを利用した宣言的トランザクション

  <groupId>example.transaction</groupId>
  <artifactId>transactional</artifactId>

・（2018.04.21、2018.04.22）XMLコンフィギュレーションによる宣言的トランザクション

  <groupId>example.transaction</groupId>
  <artifactId>xml-config</artifactId>

【3.3.2:明示的トランザクション】

・（2018.04.21、2018.04.22）PlatformTransactionManagerを利用した明示的トランザクション制御

  <groupId>example.transaction</groupId>
  <artifactId>platformtransactionmanager</artifactId>

・（2018.04.21、2018.04.22）TransactionTemplateを利用した明示的トランザクション制御

  <groupId>example.transaction</groupId>
  <artifactId>transactiontemplate</artifactId>

【3.4:データアクセスエラーのハンドリング】

【3.4.2:データアクセス例外のハンドリング】

・(2018.04.22)データアクセス例外のハンドリング例

  <groupId>example.dataaccessexception</groupId>
  <artifactId>handle-exception</artifactId>

【3.4.3:データアクセス例外の変換ルールのカスタマイズ】

・(2018.04.22)H2データベースのエラーコードのカスタマイズ

  <groupId>example.dataaccessexception</groupId>
  <artifactId>custom-error-codes</artifactId>

