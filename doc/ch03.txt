【3.1:Springによるデータアクセス】

【3.1.2:データソースのコンフィギュレーション】

・(2018.04.23、2018.08.25)アプリケーション定義のデータソース（Java-config）

　pom.xml:
　
  <groupId>example.datasource</groupId>
  <artifactId>postgres</artifactId>
	・・・
  <dependencies>
        <!-- @Bean, @Configuration, etc. -->
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>

		<!--  org.apache.commons.dbcp2.BasicDataSource -->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-dbcp2</artifactId>
		</dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>

  </dependencies>

　Postgresデータベース設定：
　
　	データベース：sample
　	ユーザ名：demo
　	パスワード：demo

　参照：　https://docs.oracle.com/javase/jp/8/docs/api/javax/sql/DataSource.html


・(2018.04.23、2018.08.25)アプリケーション定義のデータソース（XML-config）

  <groupId>example.datasource</groupId>
  <artifactId>postgres-xml</artifactId>
　
　ベース：postgres
　
　
・（2018.04.15、2018.08.25）組み込みデータソース（Java-config)

　pom.xml:
　
  <groupId>example.datasource</groupId>
  <artifactId>embedded-db</artifactId>
	・・・
  <dependencies>
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<!-- org.springframework.jdbc.datasource.embedded.EmbeddedDatabase, etc. -->
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>

		<!-- org.h2.Driver -->
 		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>
  </dependencies>
	

・（2018.04.15、2018.08.25）組み込みデータソース（XML-config)

  <groupId>example.datasource</groupId>
  <artifactId>embedded-db-xml</artifactId>

　ベース：embedded-db


【3.2:Spring　JDBC】

・サンプルアプリケーションで用いるPostgreSQLのデータベースのセットアップ

　①PostgreSQLにログイン後にスクリプトを読み込む
　
	C:\books\springframework>psql -U demo -d sample
	ユーザー demo のパスワード:

	sample=> \i sql/schema.sql
	DROP TABLE
	DROP TABLE
	CREATE TABLE
	CREATE TABLE
	sample=> \i sql/insert-init-data.sql
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	sample=> \dt
	             リレーション一覧
	 スキーマ |    名前    |    型    | 所有者
	----------+------------+----------+--------
	 public   | equipment  | テーブル | demo
	 public   | room       | テーブル | demo
	 public   | user_table | テーブル | demo
	(3 行)


	sample=> select * from room;
	 room_id |      room_name       | capacity
	---------+----------------------+----------
	 A001    | 幹部用会議室         |       10
	 C001001 | セミナールーム       |       30
	 X9999   | カンファレンスルーム |      100
	(3 行)


	sample=> select * from equipment;
	 equipment_id | room_id |   equipment_name   | equipment_count | equipment_remarks
	--------------+---------+--------------------+-----------------+-------------------
	 10-1         | A001    | テレビ会議システム |               1 |
	 20-1         | A001    | プロジェクタ       |               1 | 部屋備え付けです
	 40-500       | C001001 | シンクライアント   |              10 |
	 20-2         | C001001 | プロジェクタ       |               5 | 移動可能です
	 30-1         | C001001 | ホワイトボード     |               6 | 移動可能です
	(5 行)

　②コマンドラインからスクリプトを読み込む

	C:\books\springframework>psql -U demo -d sample -f sql/schema.sql
	ユーザー demo のパスワード:
	DROP TABLE
	DROP TABLE
	CREATE TABLE
	CREATE TABLE

	C:\books\springframework>psql -U demo -d sample -f sql/insert-init-data.sql
	ユーザー demo のパスワード:
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1


【3.2.2:JdbcTemplateクラスを利用したCRUD操作】

・（2018.04.15、2018.08.25）JdbcTemplateを使用したデータアクセス(H2)

　pom.xml：
　
  <groupId>example.jdbc</groupId>
  <artifactId>jdbctemplate</artifactId>
	・・・
  <dependencies>
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<!-- org.springframework.jdbc.core.JdbcTemplate, etc. -->
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>

		<!-- org.h2.Driver, etc. -->
 		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>
  </dependencies>

　H2のテーブル：

　schema.sql:
	CREATE TABLE user (
  	user_id         INTEGER PRIMARY KEY,
  	user_name VARCHAR(30),
  	email  VARCHAR(50)
　	);
　	
　insert-nit-data.sql:
	INSERT INTO user VALUES (1, 'mkyong', 'mkyong@gmail.com');
	INSERT INTO user VALUES (2, 'alex', 'alex@yahoo.com');
	INSERT INTO user VALUES (3, 'joel', 'joel@gmail.com');


・（2018.04.23、2018.08.25）JdbcTemplateを使用したデータアクセス（PostgreSQL）

　pom.xml:
　
  <groupId>example.jdbc</groupId>
  <artifactId>jdbctemplate-pg</artifactId>
	・・・
  <dependencies>
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>
		
		<!-- org.springframework.jdbc.core.JdbcTemplate, etc. -->
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>

		<!-- org.apache.commons.dbcp2.BasicDataSource -->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-dbcp2</artifactId>
		</dependency>		

		<!-- org.postgresql.Driver -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
  </dependencies>


　PostgreSQL設定：
　
　	データベース：sample
　	テーブル：user_table
　	ユーザ名：demo
　	パスワード：demo

　PostgreSQLでの確認：

	C:\Users\sasaki>psql -U demo sample
	ユーザー demo のパスワード:
	psql (10.3)

	sample=> \dt
	             リレーション一覧
	 スキーマ |    名前    |    型    | 所有者
	----------+------------+----------+--------
	 public   | equipment  | テーブル | demo
	 public   | room       | テーブル | demo
	 public   | user_table | テーブル | demo
	(3 行)


	sample=> select * from user_table;
	 user_id | user_name |      email
	---------+-----------+------------------
	 1       | mkyong    | mkyong@gmail.com
	 2       | alex      | alex@yahoo.com
	 3       | joel      | joel@gmail.com
	(3 行)


・（2018.04.15、2018.08.25）Java標準データ型による1項目の取得（H2)

　pom.xml:
　
  <groupId>example.jdbc</groupId>
  <artifactId>queryforobject</artifactId>

  <dependencies>
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<!-- org.springframework.jdbc.core.JdbcTemplate, etc. -->
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>

 		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>
  </dependencies>

　データベース設定：
　
	schema.sql:
	
		CREATE TABLE room (
		  room_id       VARCHAR(10) NOT NULL PRIMARY KEY,
		  room_name 	VARCHAR(30) NOT NULL,
		  capacity		INT NOT NULL
		);

		CREATE TABLE equipment (
		  equipment_id		VARCHAR(10) NOT NULL PRIMARY KEY,
		  room_id			VARCHAR(10) NOT NULL,
		  equipment_name 	VARCHAR(30) NOT NULL,
		  equipment_count	INT NOT NULL,
		  equipment_remarks	VARCHAR(100),
		  FOREIGN KEY (room_id) REFERENCES room(room_id)
		);
	
	insert-init-data.sql：
	
		INSERT INTO room VALUES ('A001', '幹部用会議室', 10);
		INSERT INTO room VALUES ('C001001', 'セミナールーム', 30);
		INSERT INTO room VALUES ('X9999', 'カンファレンスルーム', 100);

		INSERT INTO equipment VALUES ('10-1', 'A001', 'テレビ会議システム', 1, NULL);
		INSERT INTO equipment VALUES ('20-1', 'A001', 'プロジェクタ', 1, '部屋備え付けです');
		INSERT INTO equipment VALUES ('40-500', 'C001001', 'シンクライアント', 10, NULL);
		INSERT INTO equipment VALUES ('20-2', 'C001001', 'プロジェクタ', 5, '移動可能です');
		INSERT INTO equipment VALUES ('30-1', 'C001001', 'ホワイトボード', 6, '移動可能です');


・（2018.04.24、2018.08.25）Java標準データ型による1項目の取得(PostgreSQL)

　pom.xml:
　
  <groupId>example.jdbc</groupId>
  <artifactId>queryforobject-pg</artifactId>

  <dependencies>
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<!-- org.springframework.jdbc.core.JdbcTemplate, etc. -->
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>

		<!-- org.apache.commons.dbcp2.BasicDataSource -->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-dbcp2</artifactId>
		</dependency>		

		<!-- org.postgresql.Driver -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
  </dependencies>

　データベース設定：
　	データベース：sample
　	テーブル：room, equipment
　	ユーザ名：demo
　	パスワード：demo

　PostgreSQLでの確認：
　
	C:\Users\sasaki>psql -U demo sample
	ユーザー demo のパスワード:

	sample=> \d room
	                          テーブル "public.room"
	    列     |          型           | 照合順序 | Null 値を許容 | デフォルト
	-----------+-----------------------+----------+---------------+------------
	 room_id   | character varying(10) |          | not null      |
	 room_name | character varying(30) |          | not null      |
	 capacity  | integer               |          | not null      |
	インデックス:
	    "room_pkey" PRIMARY KEY, btree (room_id)
	参照元:
	    TABLE "equipment" CONSTRAINT "equipment_room_id_fkey" FOREIGN KEY (room_id) REFERENCES room(room_id)

	sample=> select * from room;
	 room_id |      room_name       | capacity
	---------+----------------------+----------
	 C001001 | セミナールーム       |       30
	 X9999   | カンファレンスルーム |      100
	 A001    | 幹部用会議室         |       20
	(3 行)

	sample=> select max(capacity) from room;
	 max
	-----
	 100
	(1 行)


・（2018.04.15、2018.08.25）バインド変数を利用したSQL（H2)

　ベース：queryforobject
　
  <groupId>example.jdbc</groupId>
  <artifactId>bindparam</artifactId>

・（2018.04.25、2018.08.25）バインド変数を利用したSQL(PostgreSQL)

　ベース：queryforobject-pg

  <groupId>example.jdbc</groupId>
  <artifactId>bindparam-pg</artifactId>


・（2018.04.15、2018.08.26）名前付きバインド変数を利用したSQL（H2)

　ベース：bindparam
　
  <groupId>example.jdbc</groupId>
  <artifactId>named-bindparam</artifactId>

・（2018.04.25、2018.08.26）名前付きバインド変数を利用したSQL(PostgreSQL)

　ベース：bindparam-pg
　
  <groupId>example.jdbc</groupId>
  <artifactId>named-bindparam-pg</artifactId>

・（2018.04.15、2018.08.26）MapSqlParameterSource（H2)

　ベース:named-bindparam
　
  <groupId>example.jdbc</groupId>
  <artifactId>mapsqlparametersource</artifactId>

・（2018.04.25、2018.08.26）MapSqlParameterSource(PostgreSQL)

　ベース：named-bindparam-pg
　
  <groupId>example.jdbc</groupId>
  <artifactId>mapsqlparametersource-pg</artifactId>

・（2018.04.15、2018.08.26）BeanPropertySqlParameterSource（H2)

　ベース:named-bindparam

  <groupId>example.jdbc</groupId>
  <artifactId>beanpropertysqlparametersource</artifactId>

・（2018.04.25、2018.08.26）BeanPropertySqlParameterSource(PostgreSQL)

　ベース：named-bindparam-pg

  <groupId>example.jdbc</groupId>
  <artifactId>beanpropertysqlparametersource-pg</artifactId>

・（2018.04.15、2018.08.26）1行の検索結果を取得(H2)

　ベース：bindparam
　
  <groupId>example.jdbc</groupId>
  <artifactId>queryformap</artifactId>

・（2018.04.25、2018.08.26）1行の検索結果を取得(PostgreSQL)

　ベース：bindparam-pg

  <groupId>example.jdbc</groupId>
  <artifactId>queryformap-pg</artifactId>

・（2018.04.15、2018.08.27）複数行の検索結果を取得(H2)

　ベース：queryformap
　
  <groupId>example.jdbc</groupId>
  <artifactId>queryforlist</artifactId>

・（2018.04.25）複数行の検索結果を取得（PostgresSQL)

　ベース：queryformap-pg

  <groupId>example.jdbc</groupId>
  <artifactId>queryforlist-pg</artifactId>

・（2018.04.16）テーブルを更新する処理（H2) 

　ベース：queryforlist
　
  <groupId>example.jdbc</groupId>
  <artifactId>update</artifactId>

・（2018.04.26）テーブルを更新する処理(PostgreSQL)

　ベース：queryforlist-pg

  <groupId>example.jdbc</groupId>
  <artifactId>update-pg</artifactId>

　(コメント）
　
　	INSERT/UPDATE/DELETE操作を完了させるために、トランザクションをコミットさせなければならない
　	（INSERT/UPDATE/DELETE後のSELECTで結果が反映されていない）
　	ここでは、JdbcRoomDaoクラスに＠Transactionalアノテーションを追加
　	更に、設定ファイルにトランザクションマネージャのBean定義と、tx:annotation-drivenタグを追加
　	
【3.2.3:取得結果の変換処理】

・（2018.04.17）RowMapperの実装

  <groupId>example.jdbc</groupId>
  <artifactId>rowmapper</artifactId>

・（2018.04.26）RowMapperの実装

  <groupId>example.jdbc</groupId>
  <artifactId>rowmapper-pg</artifactId>

・（2018.04.17）ラムダ式を利用したRowMapperの実装

  <groupId>example.jdbc</groupId>
  <artifactId>rowmapper-lambda</artifactId>

・（2018.04.26）ラムダ式を利用したRowMapperの実装（postgreSQL）

  <groupId>example.jdbc</groupId>
  <artifactId>rowmapper-lambda-pg</artifactId>

・（2018.04.17）BeanPropertyRowMapperを利用したDaoクラスの実装

  <groupId>example.jdbc</groupId>
  <artifactId>beanpropertyrowmapper</artifactId>

・（2018.04.27）BeanPropertyRowMapperを利用したDaoクラスの実装(PostgreSQL)

  <groupId>example.jdbc</groupId>
  <artifactId>beanpropertyrowmapper-pg</artifactId>

・（2018.04.17）ResultSetExtractor

  <groupId>example.jdbc</groupId>
  <artifactId>resultsetextractor</artifactId>

・（2018.04.27）ResultSetExtractor(PostgreSQL)

  <groupId>example.jdbc</groupId>
  <artifactId>resultsetextractor-pg</artifactId>


・（2018.04.18）RowCallbackHandler

  <groupId>example.jdbc</groupId>
  <artifactId>rowcallbackhandler</artifactId>

・（2018.04.27）RowCallbackHandler(PostgreSQL)

  <groupId>example.jdbc</groupId>
  <artifactId>rowcallbackhandler-pg</artifactId>


【3.3:トランザクション管理】

【3.3.2:宣言的トランザクション】

・（2018.04.21, 2018.04.22）＠Transactionを利用した宣言的トランザクション

  <groupId>example.transaction</groupId>
  <artifactId>transactional</artifactId>

・（2018.04.28）＠Transactionを利用した宣言的トランザクション(PostgreSQL)

  <groupId>example.transaction</groupId>
  <artifactId>transactional-pg</artifactId>

・（2018.04.21、2018.04.22）XMLコンフィギュレーションによる宣言的トランザクション

  <groupId>example.transaction</groupId>
  <artifactId>xml-config</artifactId>

・（2018.04.28）XMLコンフィギュレーションによる宣言的トランザクション(PostgreSQL)

  <groupId>example.transaction</groupId>
  <artifactId>xml-config-pg</artifactId>


【3.3.3:明示的トランザクション】

・（2018.04.21、2018.04.22）PlatformTransactionManagerを利用した明示的トランザクション制御

  <groupId>example.transaction</groupId>
  <artifactId>platformtransactionmanager</artifactId>

・（2018.04.28）PlatformTransactionManagerを利用した明示的トランザクション制御(PostgreSQL)

  <groupId>example.transaction</groupId>
  <artifactId>platformtransactionmanager-pg</artifactId>

・（2018.04.21、2018.04.22）TransactionTemplateを利用した明示的トランザクション制御

  <groupId>example.transaction</groupId>
  <artifactId>transactiontemplate</artifactId>

・（2018.04.28）TransactionTemplateを利用した明示的トランザクション制御(PostgreSQL)

  <groupId>example.transaction</groupId>
  <artifactId>transactiontemplate-pg</artifactId>

【3.4:データアクセスエラーのハンドリング】

【3.4.2:データアクセス例外のハンドリング】

・(2018.04.22)データアクセス例外のハンドリング例

  <groupId>example.dataaccessexception</groupId>
  <artifactId>handle-exception</artifactId>

・(2018.04.28)データアクセス例外のハンドリング例(PostgreSQL)

  <groupId>example.dataaccessexception</groupId>
  <artifactId>handle-exception-pg</artifactId>

【3.4.3:データアクセス例外の変換ルールのカスタマイズ】

・(2018.04.22)H2データベースのエラーコードのカスタマイズ

  <groupId>example.dataaccessexception</groupId>
  <artifactId>custom-error-codes</artifactId>

