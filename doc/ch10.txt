【10.1:JPA(Java Persistence API)とは】

【10.1.1:ORMとJPAの概念】

・(2018.12.16)Spring　JDBCを使用したコード例（Java-config）

	<groupId>com.example</groupId>
	<artifactId>basic-jdbc</artifactId>

	ベース：3.3.2:transactional

【10.1.2:Entity】
【10.1.3:EntityManager】

・(2018.12.16)JPAを使用したコード例（Java-config）

	<groupId>com.example</groupId>
	<artifactId>basic-jpa</artifactId>

	参考：10.5:Spring Data JPAのセットアップ

【10.1.5:関連】

・(2018.12.16)関連（Java-config）

	<groupId>com.example</groupId>
	<artifactId>relation</artifactId>

	ベース：10.1.1:basic-jpa

　コメント：
	Roomエンティティのequipmentsプロパティーに対して、デフォルトのLazyフェッチを行うと、
	equipmentsを実使用する段階（main内のprintlnで中身を展開するとき）で、
	org.hibernate.LazyInitializationExceptionが発生する
	暫定対策として、eagerフェッチを指定した
	

【10.1.6:JPQL(Java Persistence Query Language)】

・(2018.12.17)JPQLの利用例（Java-config）

	<groupId>com.example</groupId>
	<artifactId>jpql</artifactId>

	ベース：10.1.5:relation

【10.2:JPAを用いたデータベースの基本】

【10.2.1:JPAによるCRUD操作】

・(2018.12.17、2018.12.27)JPAによるCRUD操作の実装例（H2、JavaConfig）

	<groupId>com.example</groupId>
	<artifactId>crud</artifactId>

	ベース：10.1.6:jpql

　コメント：

　	@GeneratedValueをデフォルトで適用すると（GenerationType.AUTO)、
　	H2データベースでは、Sequence "HIBERNATE_SEQUENCE" not found
　	が発生する

　	@GeneratedValue(strategy = GenerationType.IDENTITY)
	と明示的に指定する必要がある
	
	参考：https://stackoverflow.com/questions/39807483/sequence-hibernate-sequence-not-found-sql-statement　	


・(2018.12.27)JPAによるCRUD操作の実装例（H2、XMLConfig）

	<groupId>com.example</groupId>
	<artifactId>crud-xml</artifactId>

	ベース：10.2.1:crud
　　参考：10.5:Spring Data JPA のセットアップ
　　
・(2018.12.28)JPAによるCRUD操作の実装例（PostgreSQL、XMLConfig）

	<groupId>com.example</groupId>
	<artifactId>crud-pg</artifactId>

	ベース：10.2.1:crud、10.2.1:crud-xml
　　参考：10.5:Spring Data JPA のセットアップ
　　
【10.2.2:JPAによるJPQLを用いたデータアクセス】

・(2018.12.17、2018.12.28)JOIN FETCHを用いた関連Entityの読み込み（H2）

	<groupId>com.example</groupId>
	<artifactId>join-fetch</artifactId>

	ベース：10.2.1:crud

・(2018.12.28)JOIN FETCHを用いた関連Entityの読み込み（PostgresSQL)

	<groupId>com.example</groupId>
	<artifactId>join-fetch-pg</artifactId>

	ベース：10.2.1:crud-pg、10.2.2:join-fetch

・(2018.12.17、2018.12.28)データベースの更新（H2)

	<groupId>com.example</groupId>
	<artifactId>update-jpql</artifactId>

	ベース：10.2.2:join-fetch

・(2018.12.28)データベースの更新（PostgreSQL)

	<groupId>com.example</groupId>
	<artifactId>update-jpql-pg</artifactId>

	ベース：10.2.2:join-fetch-pg、10.2.2:update-jpql

【10.2.3:排他制御】

・(2018.12.19、2018.12.29)楽観ロック

	<groupId>com.example</groupId>
	<artifactId>optimistic-lock</artifactId>

	ベース：10.2.2:updagte-jpql

・(2018.12.20)悲観ロック

	<groupId>com.example</groupId>
	<artifactId>pessimistic-lock</artifactId>

	ベース：10.2.2:updagte-jpql、10.2.3:optimistic-lock
	
　コメント：
　	悲観ロック獲得時にPessimisticLockExceptionエラーが発生しない
　	（単純に待たされる模様）


【10.6:Repositoryの作成と利用】

【10.6.1:Spring Data JPA標準のCRUD操作】

・(2018.12.22)CRUD操作の実装例(Java-config)

	<groupId>com.example</groupId>
	<artifactId>crud</artifactId>

	ベース：10.2.1:crud

　コメント：

	JpaRepositoryのインターフェースが変更となっている
	参考：https://stackoverflow.com/questions/49316751/spring-data-jpa-findone-change-to-optional-how-to-use-this	
	
	//Room room = roomRepository.findOne(id);
	Optional<Room> room = roomRepository.findById(id);

	//roomRepository.delete(id);
	roomRepository.deleteById(id);

	
・(2018.12.22)CRUD操作の実装例(XML-config)

	<groupId>com.example</groupId>
	<artifactId>crud-xml</artifactId>

	ベース：3.2.2:queryforobject, 10.6.1:crud

・(2018.12.22)CRUD操作の実装例(PostgreSQL)

	<groupId>com.example</groupId>
	<artifactId>crud-pg</artifactId>

	ベース：3.3.2:transactional-pg, 10.6.1:crud

　コメント：
　	以下のコマンドでデータベースを初期化する
　	
	C:\books\springframework\ch10>psql -U demo -d sample2
	ユーザー demo のパスワード:
	psql (10.3)
	"help" でヘルプを表示します。

	sample2=> \i sql/schema.sql
	DROP TABLE
	DROP TABLE
	CREATE TABLE
	CREATE TABLE
	sample2=> \i sql/insert-init-data.sql
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	sample2=> \dt
	             リレーション一覧
	 スキーマ |   名前    |    型    | 所有者
	----------+-----------+----------+--------
	 public   | equipment | テーブル | demo
	 public   | room      | テーブル | demo
	(2 行)　


【10.6.2:JPQLによるデータアクセス】

・(2018.12.23)@Queryを使用する方法(H2)

	<groupId>com.example</groupId>
	<artifactId>jpql-annotation</artifactId>

	ベース：10.6.1:crud

　コメント：
	UPDATE　JPQLで以下のエラーが出る：

	org.hibernate.hql.internal.QueryExecutionRequestException: Not supported for DML operations [UPDATE com.example.domain.model.Room r SET r.capacity = :capacity]
	
	対策：
		JpaRepositoryで更新系APIに＠Modifyingを指定する
	参考：
		https://stackoverflow.com/questions/44022076/jparepository-not-supported-for-dml-operations-delete-query	
		

・(2018.12.23)@Queryを使用する方法(PostgreSQL)

	<groupId>com.example</groupId>
	<artifactId>jpql-annotation-pg</artifactId>

	ベース：10.6.1:crud-pg、10.6.2:jpql-annotation

・(2018.12.23)メソッド名からクエリを生成する方法(H2)

	<groupId>com.example</groupId>
	<artifactId>jpql-methodname</artifactId>

	ベース：10.6.1:crud

・(2018.12.23)メソッド名からクエリを生成する方法(PostgreSQL)

	<groupId>com.example</groupId>
	<artifactId>jpql-methodname-pg</artifactId>

	ベース：10.6.1:crud-pg、10.6.2:jpql-methodname


【10.6.3:排他制御】

・(2018.12.23)楽観ロック(H2)

	<groupId>com.example</groupId>
	<artifactId>optimistic-lock</artifactId>

	ベース：10.2.3:optimistic-lock、10.6.1:crud

　コメント：
	成功の回数と最終的なversionの値のつじつまが合っていない

・(2018.12.23)楽観ロックを用いたインクリメントの競合(H2)

	<groupId>com.example</groupId>
	<artifactId>optimistic-increment</artifactId>

	ベース：10.6.3:optimistic-lock

・(2018.12.23)楽観ロックを用いたインクリメントの競合(PostgreSQL)

	<groupId>com.example</groupId>
	<artifactId>optimistic-increment-pg</artifactId>

	ベース：10.6.1:crud-pg、10.6.3:optimistic-increment

・(2018.12.24)悲観ロックを用いたインクリメントの競合(H2)

	<groupId>com.example</groupId>
	<artifactId>pessimistic-increment</artifactId>

	ベース：10.6.3:optimistic-increment

・(2018.12.24)悲観ロックを用いたインクリメントの競合(PostgreSQL)

	<groupId>com.example</groupId>
	<artifactId>pessimistic-increment-pg</artifactId>

	ベース：10.6.1:crud-pg、10.6.3:pessimistic-increment

【10.6.4:ページネーション】

・(2018.12.24)ページネーション(H2)

	<groupId>com.example</groupId>
	<artifactId>pagination</artifactId>

	ベース：10.6.1:crud

・(2018.12.24)ページネーション(PostgreSQL)

	<groupId>com.example</groupId>
	<artifactId>pagination-pg</artifactId>

	ベース：10.6.1:crud-pg、10.6.4:pagination

【10.6.5:Repositoryへのカスタムメソッドの追加】

・(2018.12.24)カスタムメソッド(H2)

	<groupId>com.example</groupId>
	<artifactId>custom-repository</artifactId>

	ベース：10.6.1:crud

　参考：JPA Criteria API Queries
　https://www.objectdb.com/java/jpa/query/criteria

・(2018.12.25)カスタムメソッド(PostgreSQL)

	<groupId>com.example</groupId>
	<artifactId>custom-repository-pg</artifactId>

	ベース：10.6.1:crud-pg、10.6.5:custom-repository

【10.6.6:監査情報の付与】

・(2018.12.25)監査情報の付与(H2)

	<groupId>com.example</groupId>
	<artifactId>audit</artifactId>

	ベース：10.6.1:crud

　コメント：
　
　　Spring Data JPA の監査機能を利用するためには、spring-aspects.jarが必要
　　
		<!-- 2018.12.25: Could not configure Spring Data JPA auditing-feature -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
		</dependency>

・(2018.12.25)監査情報の付与(H2、XML-config)

	<groupId>com.example</groupId>
	<artifactId>audit-xml</artifactId>

	ベース：10.6.1:crud-xml、10.6.6:audit

・(2018.12.25)監査情報の付与(PostgreSQL)

	<groupId>com.example</groupId>
	<artifactId>audit-pg</artifactId>

	ベース：10.6.1:crud-pg、10.6.6:audit


	