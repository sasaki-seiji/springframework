【10.1:JPA(Java Persistence API)とは】

【10.1.1:ORMとJPAの概念】

・(2018.12.16)Spring　JDBCを使用したコード例（Java-config）

	<groupId>com.example</groupId>
	<artifactId>basic-jdbc</artifactId>

	ベース：3.3.2:transactional

【10.1.2:Entity】
【10.1.3:EntityManager】

・(2018.12.16)JPAを使用したコード例（Java-config）

	<groupId>com.example</groupId>
	<artifactId>basic-jpa</artifactId>

	参考：10.5:Spring Data JPAのセットアップ

【10.1.5:関連】

・(2018.12.16)関連（Java-config）

	<groupId>com.example</groupId>
	<artifactId>relation</artifactId>

	ベース：10.1.1:basic-jpa

　コメント：
	Roomエンティティのequipmentsプロパティーに対して、デフォルトのLazyフェッチを行うと、
	equipmentsを実使用する段階（main内のprintlnで中身を展開するとき）で、
	org.hibernate.LazyInitializationExceptionが発生する
	暫定対策として、eagerフェッチを指定した
	

【10.1.6:JPQL(Java Persistence Query Language)】

・(2018.12.17)JPQLの利用例（Java-config）

	<groupId>com.example</groupId>
	<artifactId>jpql</artifactId>

	ベース：10.1.5:relation

【10.2:JPAを用いたデータベースの基本】

【10.2.1:JPAによるCRUD操作】

・(2018.12.17)JPAによるCRUD操作の実装例

	<groupId>com.example</groupId>
	<artifactId>crud</artifactId>

	ベース：10.1.6:jpql

　コメント：

　	@GeneratedValueをデフォルトで適用すると（GenerationType.AUTO)、
　	H2データベースでは、Sequence "HIBERNATE_SEQUENCE" not found
　	が発生する

　	@GeneratedValue(strategy = GenerationType.IDENTITY)
	と明示的に指定する必要がある
	
	参考：https://stackoverflow.com/questions/39807483/sequence-hibernate-sequence-not-found-sql-statement　	


【10.2.2:JPAによるJPQLを用いたデータアクセス】

・(2018.12.17)JOIN FETCHを用いた関連Entityの読み込み

	<groupId>com.example</groupId>
	<artifactId>join-fetch</artifactId>

	ベース：10.2.1:crud

・(2018.12.17)データベースの更新

	<groupId>com.example</groupId>
	<artifactId>update-jpql</artifactId>

	ベース：10.2.2:join-fetch

【10.2.3:排他制御】

・(2018.12.19)楽観ロック

	<groupId>com.example</groupId>
	<artifactId>optimistic-lock</artifactId>

	ベース：10.2.2:updagte-jpql

・(2018.12.20)悲観ロック

	<groupId>com.example</groupId>
	<artifactId>pessimistic-lock</artifactId>

	ベース：10.2.2:updagte-jpql、10.2.3:optimistic-lock
	
　コメント：
　	悲観ロック獲得時にPessimisticLockExceptionエラーが発生しない
　	（単純に待たされる模様）

	