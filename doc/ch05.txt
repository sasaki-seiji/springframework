【5.3:＠Controllerの実装】

【5.3.6:View Controllerの利用】

・（2018.05.05）Java-configによるBean定義

  <groupId>example</groupId>
  <artifactId>viewcontroller</artifactId>

・（2018.05.05）XMLによるBean定義

  <groupId>example</groupId>
  <artifactId>viewcontroller-xml</artifactId>

【5.4:リクエストマッピング】

【5.4.1:リクエストパスの使用】

・（2018.05.09）リクエストパスの使用

  <groupId>example</groupId>
  <artifactId>requestpath</artifactId>

【5.4.2:パスパターンの使用】

・（2018.05.09）パスパターンの使用

  <groupId>example</groupId>
  <artifactId>pathpattern</artifactId>

【5.4.4:リクエストパラメータの使用】

・（2018.05.05、2018.05.06、2018.05.12）リクエストパラメータ

  <groupId>example</groupId>
  <artifactId>requestparam</artifactId>

【5.5:リクエストデータの取得】

・（2018.05.06）リクエストデータの取得

  <groupId>example</groupId>
  <artifactId>requestdata</artifactId>

【5.5.6:バインディング処理のカスタマイズ(WebDataBinder)】

・（2018.05.06）WebDataBinder

  <groupId>example</groupId>
  <artifactId>webdatabinder</artifactId>

【5.5.7:アノテーションを使用したフォーマットの指定】

・（2018.05.08）＠DateTimeFormat

  <groupId>example</groupId>
  <artifactId>datetimeformat</artifactId>

【5.6:フォームクラスの実装】

【5.6.1:フォームオブジェクトのスコープ】

・（2018.05.12）フラッシュスコープ

  <groupId>example</groupId>
  <artifactId>flashscope</artifactId>

【5.6.5:シンプル型のコレクションとのバインディング】

・（2018.05.12）シンプル型コレクションとのバインディング

  <groupId>example</groupId>
  <artifactId>simple-collection</artifactId>

【5.6.6:ネストしたJavaBeansとのバインディング】

・（2018.05.12）ネストしたJavaBeansとのバインディング

  <groupId>example</groupId>
  <artifactId>nested-javabeans</artifactId>

【5.6.7:コレクション内のJavaBeansとのバインディング】

・（2018.05.12）コレクション内のJavaBeansとのバインディング

  <groupId>example</groupId>
  <artifactId>javabeans-collection</artifactId>


【5.7:入力チェック】


【5.7.2:入力チェック結果の判定】

・（2018.05.13）入力チェック結果の判定

  <groupId>example</groupId>
  <artifactId>bindingresult</artifactId>

【5.7.3:未入力の扱い】

・（2018.05.16）StringTrimmerEditor

  <groupId>example</groupId>
  <artifactId>stringtrimmereditor</artifactId>

【5.7.4:入力チェックルールの指定】

・（2018.05.13、2018.05.15）入力チェックルール

  <groupId>example</groupId>
  <artifactId>validation-rule</artifactId>

（コメント）
	・BigDecimalのプロパティが以下のc:outタグで表示されない
	
		<c:out value="${ValidationForm.rate}" />

	・有効なクレジットカード番号については、以下を参照
	https://ja.wikipedia.org/wiki/クレジットカードの番号
	

【5.7.5:ネストしたJavaBeansの入力チェック】

・（2018.05.16）ネストしたJavaBeansの入力チェック

  <groupId>example</groupId>
  <artifactId>validate-nested-javabeans</artifactId>

【5.7.6:入力チェックルールの追加】

・（2018.05.17）既成ルールを合成して作成する方法

  <groupId>example</groupId>
  <artifactId>alphanumeric-validator</artifactId>

・（2018.05.18）独自バリデータを実装して作成する方法

  <groupId>example</groupId>
  <artifactId>equalsproperty-validator</artifactId>


【5.7.7:入力チェックルールの切り替え】

・（2018.05.19）入力チェックルールの切り替え

  <groupId>example</groupId>
  <artifactId>validation-group</artifactId>

（コメント）

	以下のエラーメッセージが出る
	
java.lang.annotation.AnnotationFormatError: Duplicate annotation for class: interface javax.validation.constraints.Size: @javax.validation.constraints.Size(groups=[interface example.app.AccountCreateForm$PayAccount], min=14, message={javax.validation.constraints.Size.message}, max=16, payload=[])	
	

【5.7.8:エラー情報の表示】

・（2018.05.19）エラー情報の表示

  <groupId>example</groupId>
  <artifactId>diplay-errorinfo</artifactId>

	
【5.7.9:エラーメッセージの解決】

・（2018.05.19）Spring管理のプロパティファイルにエラーメッセージを定義

  <groupId>example</groupId>
  <artifactId>messagesource-messages</artifactId>

・（2018.05.19）Bean Validation管理のプロパティファイルにエラーメッセージを定義

  <groupId>example</groupId>
  <artifactId>validation-messages</artifactId>

・（2018.05.19）message属性にメッセージを定義

  <groupId>example</groupId>
  <artifactId>message-attribute</artifactId>

・（2018.05.19）プロパティの論理名の定義

  <groupId>example</groupId>
  <artifactId>logical-propertyname</artifactId>

【5.7.11:Spring Validatorの利用】

・（2018.05.19）Spring Validatorを利用した相関項目チェックの実装

  <groupId>example</groupId>
  <artifactId>spring-validator</artifactId>


【5.8:画面遷移】


【5.8.1:遷移先の指定方法】

・（2018.05.20）View名を文字列として返却する

  <groupId>example</groupId>
  <artifactId>transition</artifactId>

【5.8.2:リクエストパスへのリダイレクト】

・（2018.05.20）リダイレクトする際のView名の指定

  <groupId>example</groupId>
  <artifactId>redirect</artifactId>

・（2018.05.26）リクエストパラメータの指定

  <groupId>example</groupId>
  <artifactId>redirect-requestparam</artifactId>

・（2018.05.26）パス変数の指定

  <groupId>example</groupId>
  <artifactId>redirect-pathvariable</artifactId>

【5.8.3:リクエストパスへのフォワード】

・（2018.05.26）フォワードする際のView名の指定

  <groupId>example</groupId>
  <artifactId>forward</artifactId>

【5.8.4:Viewとのデータ連携】

・（2018.05.26）ModelのAPIを利用

  <groupId>example</groupId>
  <artifactId>addattribute-modelmethod</artifactId>

・（2018.05.26）＠ModelAttributeメソッドの利用

  <groupId>example</groupId>
  <artifactId>modelattribute-annotation</artifactId>

【5.8.5:リダイレクト先との連携】

・（2018.05.27）RedirectAttributeにJavaオブジェクトを格納する

  <groupId>example</groupId>
  <artifactId>redirect-addflashattribute</artifactId>


【5.10:JSPの実装】


【5.10.2:スクリプトレット】

・（2018.05.27）スクリプトレットを使用したJSPの実装

  <groupId>example</groupId>
  <artifactId>scriptlet</artifactId>

（コメント）

	スクリプトレットからのStringの出力が文字化けする
	→　web.xmlにJSPファイルの文字コード指定(UTF-8)が抜けていた
	
【5.10.3:カスタムタグライブラリ】

・（2018.05.29）タグライブラリを使用したJSPの実装

  <groupId>example</groupId>
  <artifactId>custom-taglib</artifactId>

【5.10.4:タグファイル】

・（2018.05.30）タグファイルの作成例、利用例

  <groupId>example</groupId>
  <artifactId>tagfile</artifactId>

(コメント)

	ビルド時に、SimpleTagSupportがない旨のエラーが出る
	→　以下の依存関係を追加する

    <dependency>
    	<groupId>javax.servlet.jsp</groupId>
    	<artifactId>javax.servlet.jsp-api</artifactId>
    	<scope>provided</scope>
    </dependency>


【5.10.5:EL(expression language)】

・（2018.06.02）EL式を使ったJSPの実装、EL式を使ったオブジェクトの参照

  <groupId>example</groupId>
  <artifactId>expression-language</artifactId>

