(ドキュメント)

・sping security

https://docs.spring.io/spring-security/site/docs/5.1.1.RELEASE/api/

【9.2:Spring Securityのセットアップ】

【9.2.1:ライブラリのセットアップ】
【9.2.2:Spring SecurityのBean定義】
【9.2.3:サーブレットフィルタの設定】

・(2018.10.08)Spring Securityのセットアップ(JavaConfig)

	<groupId>example</groupId>
	<artifactId>spring-security-config</artifactId>

　ベース： 4.2:firstapp

　（依存ライブラリ）
　
	<dependencies>
		<!-- if miss, The superclass "javax.servlet.http.HttpServlet" was not found 
			on the Java Build Path -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> -->
		<dependency>
			<groupId>org.apache.taglibs</groupId>
			<artifactId>taglibs-standard-jstlel</artifactId>
		</dependency>

		<!-- org.springframework.stereotype.Controller, etc. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
		</dependency>

		<!-- org.hibernate.validator.constraints.NotEmpty -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>

		<!-- 2018.09.11: not needed? -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>

		<!-- SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder". -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>

		<!--  spring security related dependencies -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
		</dependency>

	</dependencies>

（コメント）

　・認証処理の実装がないので、ログインダイアログを入力後、以下のエラーメッセージが
	ログインダイアログに出力される

	Your login attempt was not successful, try again.
	Reason: No AuthenticationProvider found for org.springframework.security.authentication.UsernamePasswordAuthenticationToken

　・コンテキストローダリスナの構成ファイルを複数指定できる(以下参照）
　	
  <listener>
  	<listener-class>
  		org.springframework.web.context.ContextLoaderListener
  	</listener-class>
  </listener>
  <context-param>
  	<param-name>contextClass</param-name>
  	<param-value>
  		org.springframework.web.context.support.AnnotationConfigWebApplicationContext
  	</param-value>
  </context-param>
  <context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>
		example.config.AppConfig
		example.config.WebSecurityConfig
	</param-value>
  </context-param>
	

・(2018.10.08)Spring Securityのセットアップ(XML Config)

  <groupId>example</groupId>
  <artifactId>spring-security-config-xml</artifactId>

　ベース： 4.2:firstapp-xml

（コメント）

　・コンテキストローダリスナの構成ファイルを複数指定できる(以下参照）
　	
　
  <listener>
  	<listener-class>
  		org.springframework.web.context.ContextLoaderListener
  	</listener-class>
  </listener>
  <context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>
		classpath:/META-INF/applicationContext.xml
		classpath:/META-INF/security-context.xml
	</param-value>
  </context-param>


【9.4:認証処理の適用】

【9.4.2:フォーム認証】

・(2018.10.08、2018.11.06、2018.11.11)フォーム認証(JavaConfig)

	<groupId>example</groupId>
	<artifactId>form-login</artifactId>

　ベース： 4.2:firstapp、9.2:spring-security-config

　(コメント)

	<button>要素では、フォームがサブミットされない
	　
	<c:url var="loginUrl" value="/login"/>
	<form:form action="${loginUrl}">
		<table>
			<tr>
				<td><label for="username">ユーザー名</label></td>
				<td><input type="text" id="username" name="username"/></td>
			</tr>
			<tr>
				<td><label for="password">パスワード</label></td>
				<td><input type="password" id="password" name="password"/></td>
			</tr>
			<tr>
				<td>&nbsp;</td>
<!-- 2018.10.08 change: <button> element not submit form				
				<td><button>ログイン</button></td>
-->
				<td><input type="submit" value="ログイン"/></td>
			</tr>
		</table>
	</form:form>

　（2018.11.06：コメント）

	・in memory authentication を追加：
	参考：
		https://docs.spring.io/spring-security/site/docs/5.1.1.RELEASE/api/
	
	・spring-security 5 では、PasswordEncoderBean定義が必要
	参考：
		https://www.harinathk.com/spring/no-passwordencoder-mapped-id-null/

	・WebSecurityConfigクラスに以下を追加
	
		@Override
	    protected void configure(HttpSecurity http) throws Exception {
    	        http.formLogin()
    	        		.loginPage("/login")
	            		.permitAll();
	            http.authorizeRequests()
	            		.anyRequest().authenticated();
	    }
	
		@Override
		protected void configure(AuthenticationManagerBuilder auth) throws Exception {
			auth
			// enable in memory based authentication with a user named
			// "guest" and "admin"
			.inMemoryAuthentication()
			.withUser("guest").password("guest").roles("USER").and()
			.withUser("admin").password("admin").roles("USER", "ADMIN");
		}
	
		@SuppressWarnings("deprecation")
		@Bean
		PasswordEncoder passwordEncoder() {
			return NoOpPasswordEncoder.getInstance(); // tempolary use
		}

	
・(2018.10.21、2018.11.07)フォーム認証(XMLConfig)

	<groupId>example</groupId>
	<artifactId>form-login-xml</artifactId>

　ベース： 4.2:firstapp-xml、9.2:spring-security-config-xml

　（2018.11.07：コメント）
　
　in-memory authentication を指定する方法：
　参考：
https://sites.google.com/site/soracane/home/springnitsuite/spring-security/spring-securityno-settei-houhou

　security-context.xmに以下を追加
　
	<sec:authentication-manager>
		<sec:authentication-provider>
			<sec:user-service>
				<sec:user name="admin" password="admin" 
					authorities="ROLE_ADMIN,ROLE_USER" />
				<sec:user name="guest" password="guest" 
					authorities="ROLE_USER" />
			</sec:user-service>
			<sec:password-encoder ref="passwordEncoder" />
		</sec:authentication-provider>
	</sec:authentication-manager>

	<!-- use NoOpPasswordEnder instead of BCryptPasswordEncoder -->
	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.password.NoOpPasswordEncoder" />

　
・(2018.11.08)デフォルト動作のカスタマイズ(JavaConfig)

	<groupId>example</groupId>
	<artifactId>form-login</artifactId>

　ベース： 9.4.2:form-login

  <groupId>example</groupId>
  <artifactId>customized-form-login</artifactId>

　（コメント）

	WebSecurityConfigクラスのHttpSecurityの設定を以下に変更
	参考：
		 https://docs.spring.io/spring-security/site/docs/5.1.1.RELEASE/api/org/springframework/security/config/annotation/web/builders/HttpSecurity.html#formLogin--

		@Override
	    protected void configure(HttpSecurity http) throws Exception {
			http.formLogin()
            		.loginPage("/login")
            		.loginProcessingUrl("/authenticate")
            			.usernameParameter("uid")
            			.passwordParameter("pwd")
            		.permitAll();
            http.authorizeRequests()
           		.anyRequest().authenticated();
	    }


・(2018.11.10)デフォルト動作のカスタマイズ(XML Config)

	<groupId>example</groupId>
	<artifactId>customized-form-login-xml</artifactId>

　ベース： 9.4.2:form-login-xml, 9.4.2:customized-form-login


　（コメント）

	security-contex.xmlの設定を以下に変更
	
		<sec:http>
			<sec:form-login login-page="/login"
				login-processing-url="/authenticate"
				username-parameter="uid"
				password-parameter="pwd" />
			<sec:intercept-url pattern="/login"
				access="permitAll" />
			<sec:intercept-url pattern="/authenticate"
				access="permitAll" />
			<sec:intercept-url pattern="/**"
				access="isAuthenticated()" />
		</sec:http>
	

【9.4.3:認証成功時のレスポンス】

・(2018.11.11)デフォルト動作のカスタマイズ(JavaConfig)

	<groupId>example</groupId>
	<artifactId>default-target-url</artifactId>

　ベース：9.4.2:from-login

　（コメント）
　
　	/　（拒否）⇒　/login　(成功)⇒　/
　	/login　成功⇒　/menu
　	
　	のような流れとなる
　	
　(コメント）
　
	WebSecurtyConfigクラスでは以下のように設定：
	
		@Override
	    protected void configure(HttpSecurity http) throws Exception {
	            http.formLogin()
	            		.loginPage("/login")
	            		.permitAll()
	            		.defaultSuccessUrl("/menu");	// 2018.11.11 add
	            http.authorizeRequests()
	            		.anyRequest().authenticated();
	    }
	
		@Override
		protected void configure(AuthenticationManagerBuilder auth) throws Exception {
			auth
			// enable in memory based authentication with a user named
			// "guest" and "admin"
			.inMemoryAuthentication()
			.withUser("guest").password("guest").roles("USER").and()
			.withUser("admin").password("admin").roles("USER", "ADMIN");
		}

		@SuppressWarnings("deprecation")
		@Bean
		PasswordEncoder passwordEncoder() {
			//return new BCryptPasswordEncoder();
			return NoOpPasswordEncoder.getInstance(); // tempolary use
		}
　
　
・(2018.11.11)デフォルト動作のカスタマイズ(XMLConfig)

	<groupId>example</groupId>
	<artifactId>default-target-url-xml</artifactId>

　ベース：9.4.2:from-login-xml、9.4.3:default-target-url
　
　
【9.4.4:認証失敗時のレスポンス】

・(2018.10.21、2018.11.07)認証失敗時のレスポンス(JavaConfig)

	<groupId>example</groupId>
	<artifactId>failure-url</artifactId>

　ベース：9.4.2:from-login

　(2018.11.07:コメント）
　
	in-memoryの認証を追加
	WebSecurityConfigクラスのconfigure(HttpSecurity)メソッドを変更：
	参考：
		https://docs.spring.io/spring-security/site/docs/5.1.1.RELEASE/api/org/springframework/security/config/annotation/web/builders/HttpSecurity.html#formLogin--
		
		@Override
	    protected void configure(HttpSecurity http) throws Exception {
			http.formLogin()
					.loginPage("/login")
					.failureUrl("/loginFailure")
					.permitAll();
			http.authorizeRequests()
					.anyRequest().authenticated();
	    }
　

・(2018.10.27)認証失敗時のレスポンス(XML Config)

	<groupId>example</groupId>
	<artifactId>failure-url-xml</artifactId>

　ベース：9.4.2:from-login-xml, 9.4.4:failure-url

　(2018.11.08:コメント）
　
	in-memoryの認証を追加
	security-contex.xmlに以下のタグを追加

		<sec:authentication-manager>
			<sec:authentication-provider>
				<sec:user-service>
					<sec:user name="admin" password="admin" 
						authorities="ROLE_ADMIN,ROLE_USER" />
					<sec:user name="guest" password="guest" 
						authorities="ROLE_USER" />
				</sec:user-service>
				<sec:password-encoder ref="passwordEncoder" />
			</sec:authentication-provider>
		</sec:authentication-manager>

		<!-- use NoOpPasswordEnder instead of BCryptPasswordEncoder -->
		<bean id="passwordEncoder"
			class="org.springframework.security.crypto.password.NoOpPasswordEncoder" />


【9.4.5:データベース認証】

・(2018.10.28)データベース認証(JavaConfig)

	<groupId>example</groupId>
	<artifactId>dao-authentication-provider</artifactId>

　ベース：9.4.2:from-login、3.2.3:rowmapper、3.3.2:transactional

　コメント：
　
	・BCryptPasswordEncoderの代わりに、NoOpPasswordEncoderを使用
	
	・WebSecurityConfigクラスのconfigureAuthenticationManagerメソッドは、
	configureメソッドの間違いではないかと思われる

		see https://docs.spring.io/spring-security/site/docs/4.2.5.RELEASE/apidocs/org/springframework/security/config/annotation/web/configuration/WebSecurityConfigurerAdapter.html 

		@Autowired
		void configureAuthenticationManager(AuthenticationManagerBuilder auth) 
				throws Exception {
			auth.userDetailsService(userDetailsService)
				.passwordEncoder(passwordEncoder());
		}
			↓
		@Override
		protected void configure(AuthenticationManagerBuilder auth) 
				throws Exception {
			auth.userDetailsService(userDetailsService)
				.passwordEncoder(passwordEncoder());
		}

・(2018.10.28、2018.11.03)データベース認証(XML　Config)

	<groupId>example</groupId>
	<artifactId>dao-authentication-provider-xml</artifactId>

　ベース：9.4.5:dao-authentication-provider、9.4.2:from-login-xml、3.2.3:rowmapper、3.3.2:xml-config

　コメント：
　
	・BCryptPasswordEncoderの代わりに、NoOpPasswordEncoderを使用


・(2018.11.03)Userクラスを継承したUserDetailsの実装(JavaConfig)

	<groupId>example</groupId>
	<artifactId>user</artifactId>

　ベース：9.4.5:dao-authentication-provider
　

【9.4.6:パスワードのハッシュ化】

・(2018.11.05)BCryptPasswordEncoder(JavaConfig)

	<groupId>example</groupId>
	<artifactId>bcryptpasswordencoder</artifactId>

　ベース：9.4.5:dao-authentication-provider

・(2018.11.06)BCryptPasswordEncoder(XML Config)

	<groupId>example</groupId>
	<artifactId>bcryptpasswordencoder-xml</artifactId>

　ベース：9.4.5:dao-authentication-provider-xml, 9.4.6:bcryptpasswordencoder

【9.4.7:認証イベントのハンドリング】

・(2018.11.11)イベントリスナの作成(JavaConfig)

	<groupId>example</groupId>
	<artifactId>handle-bad-credentials</artifactId>

　ベース：9.4.2:form-login

【9.4.8:ログアウト】

・(2018.11.11)ログアウト(JavaConfig)

	<groupId>example</groupId>
	<artifactId>logout</artifactId>

　ベース：9.4.2:form-login

・(2018.11.11)ログアウト(XML　Config)

	<groupId>example</groupId>
	<artifactId>logout-xml</artifactId>

　ベース：9.4.2:form-login-xml、9.4.8:logout

・(2018.11.11)デフォルト動作のカスタマイズ(JavaConfig)

	<groupId>example</groupId>
	<artifactId>customized-logout</artifactId>

　ベース：9.4.8:logout

・(2018.11.12)デフォルト動作のカスタマイズ(XML Config)

	<groupId>example</groupId>
	<artifactId>customized-logout-xml</artifactId>

　ベース：9.4.8:logout-xml


【9.4.9:ログアウト成功時のレスポンス】

・(2018.11.11)ログアウト成功時に遷移するパス(JavaConfig)

	<groupId>example</groupId>
	<artifactId>logout-success-url</artifactId>

　ベース：9.4.8:logout

・(2018.11.11)ログアウト成功時に遷移するパス(XML Config)

	<groupId>example</groupId>
	<artifactId>logout-success-url-xml</artifactId>

　ベース：9.4.8:logout-xml, 9.4.9:logout-success-url


【9.4.10:認証情報へのアクセス】

・(2018.11.14)認証情報へのアクセス(JavaConfig)

  <groupId>example</groupId>
  <artifactId>authentication-info</artifactId>

　ベース：9.4.6:bcryptpasswordencoder, 9.4.8:logout


【9.4.11:認証処理とSpring MVCの連携】

・(2018.11.14)認証情報とSpringMVCの連携(JavaConfig)

	<groupId>example</groupId>
	<artifactId>authentication-springmvc</artifactId>

　ベース：9.4.10:authentication-info
　