(ドキュメント)

・sping security

https://docs.spring.io/spring-security/site/docs/5.1.1.RELEASE/api/

【9.2:Spring Securityのセットアップ】

【9.2.1:ライブラリのセットアップ】
【9.2.2:Spring SecurityのBean定義】
【9.2.3:サーブレットフィルタの設定】

・(2018.10.08)Spring Securityのセットアップ(JavaConfig)

	<groupId>example</groupId>
	<artifactId>spring-security-config</artifactId>

　ベース： 4.2:firstapp

　（依存ライブラリ）
　
	<dependencies>
		<!-- if miss, The superclass "javax.servlet.http.HttpServlet" was not found 
			on the Java Build Path -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> -->
		<dependency>
			<groupId>org.apache.taglibs</groupId>
			<artifactId>taglibs-standard-jstlel</artifactId>
		</dependency>

		<!-- org.springframework.stereotype.Controller, etc. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
		</dependency>

		<!-- org.hibernate.validator.constraints.NotEmpty -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>

		<!-- 2018.09.11: not needed? -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>

		<!-- SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder". -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>

		<!--  spring security related dependencies -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
		</dependency>

	</dependencies>

（コメント）

　・認証処理の実装がないので、ログインダイアログを入力後、以下のエラーメッセージが
	ログインダイアログに出力される

	Your login attempt was not successful, try again.
	Reason: No AuthenticationProvider found for org.springframework.security.authentication.UsernamePasswordAuthenticationToken

　・コンテキストローダリスナの構成ファイルを複数指定できる(以下参照）
　	
  <listener>
  	<listener-class>
  		org.springframework.web.context.ContextLoaderListener
  	</listener-class>
  </listener>
  <context-param>
  	<param-name>contextClass</param-name>
  	<param-value>
  		org.springframework.web.context.support.AnnotationConfigWebApplicationContext
  	</param-value>
  </context-param>
  <context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>
		example.config.AppConfig
		example.config.WebSecurityConfig
	</param-value>
  </context-param>
	

・(2018.10.08)Spring Securityのセットアップ(XML Config)

  <groupId>example</groupId>
  <artifactId>spring-security-config-xml</artifactId>

　ベース： 4.2:firstapp-xml

（コメント）

　・コンテキストローダリスナの構成ファイルを複数指定できる(以下参照）
　	
　
  <listener>
  	<listener-class>
  		org.springframework.web.context.ContextLoaderListener
  	</listener-class>
  </listener>
  <context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>
		classpath:/META-INF/applicationContext.xml
		classpath:/META-INF/security-context.xml
	</param-value>
  </context-param>


【9.4:認証処理の適用】

【9.4.2:フォーム認証】

・(2018.10.08、2018.11.06、2018.11.11)フォーム認証(JavaConfig)

	<groupId>example</groupId>
	<artifactId>form-login</artifactId>

　ベース： 4.2:firstapp、9.2:spring-security-config

　(コメント)

	<button>要素では、フォームがサブミットされない
	　
	<c:url var="loginUrl" value="/login"/>
	<form:form action="${loginUrl}">
		<table>
			<tr>
				<td><label for="username">ユーザー名</label></td>
				<td><input type="text" id="username" name="username"/></td>
			</tr>
			<tr>
				<td><label for="password">パスワード</label></td>
				<td><input type="password" id="password" name="password"/></td>
			</tr>
			<tr>
				<td>&nbsp;</td>
<!-- 2018.10.08 change: <button> element not submit form				
				<td><button>ログイン</button></td>
-->
				<td><input type="submit" value="ログイン"/></td>
			</tr>
		</table>
	</form:form>

　（2018.11.06：コメント）

	・in memory authentication を追加：
	参考：
		https://docs.spring.io/spring-security/site/docs/5.1.1.RELEASE/api/
	
	・spring-security 5 では、PasswordEncoderBean定義が必要
	参考：
		https://www.harinathk.com/spring/no-passwordencoder-mapped-id-null/

	・WebSecurityConfigクラスに以下を追加
	
		@Override
	    protected void configure(HttpSecurity http) throws Exception {
    	        http.formLogin()
    	        		.loginPage("/login")
	            		.permitAll();
	            http.authorizeRequests()
	            		.anyRequest().authenticated();
	    }
	
		@Override
		protected void configure(AuthenticationManagerBuilder auth) throws Exception {
			auth
			// enable in memory based authentication with a user named
			// "guest" and "admin"
			.inMemoryAuthentication()
			.withUser("guest").password("guest").roles("USER").and()
			.withUser("admin").password("admin").roles("USER", "ADMIN");
		}
	
		@SuppressWarnings("deprecation")
		@Bean
		PasswordEncoder passwordEncoder() {
			return NoOpPasswordEncoder.getInstance(); // tempolary use
		}

	
・(2018.10.21、2018.11.07)フォーム認証(XMLConfig)

	<groupId>example</groupId>
	<artifactId>form-login-xml</artifactId>

　ベース： 4.2:firstapp-xml、9.2:spring-security-config-xml

　（2018.11.07：コメント）
　
　in-memory authentication を指定する方法：
　参考：
https://sites.google.com/site/soracane/home/springnitsuite/spring-security/spring-securityno-settei-houhou

　security-context.xmに以下を追加
　
	<sec:authentication-manager>
		<sec:authentication-provider>
			<sec:user-service>
				<sec:user name="admin" password="admin" 
					authorities="ROLE_ADMIN,ROLE_USER" />
				<sec:user name="guest" password="guest" 
					authorities="ROLE_USER" />
			</sec:user-service>
			<sec:password-encoder ref="passwordEncoder" />
		</sec:authentication-provider>
	</sec:authentication-manager>

	<!-- use NoOpPasswordEnder instead of BCryptPasswordEncoder -->
	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.password.NoOpPasswordEncoder" />

　
・(2018.11.08)デフォルト動作のカスタマイズ(JavaConfig)

  <groupId>example</groupId>
  <artifactId>customized-form-login</artifactId>

　ベース： 9.4.2:form-login

　（コメント）

	WebSecurityConfigクラスのHttpSecurityの設定を以下に変更
	参考：
		 https://docs.spring.io/spring-security/site/docs/5.1.1.RELEASE/api/org/springframework/security/config/annotation/web/builders/HttpSecurity.html#formLogin--

		@Override
	    protected void configure(HttpSecurity http) throws Exception {
			http.formLogin()
            		.loginPage("/login")
            		.loginProcessingUrl("/authenticate")
            			.usernameParameter("uid")
            			.passwordParameter("pwd")
            		.permitAll();
            http.authorizeRequests()
           		.anyRequest().authenticated();
	    }

　(2019.06.19：コメント追記）
　
	上記設定変更に合わせて、loginForm.jspの内容も変更
		fromのaction先、ユーザ名とパスワードパラメータ名

	
・(2018.11.10)デフォルト動作のカスタマイズ(XML Config)

	<groupId>example</groupId>
	<artifactId>customized-form-login-xml</artifactId>

　ベース： 9.4.2:form-login-xml, 9.4.2:customized-form-login


　（コメント）

	security-contex.xmlの設定を以下に変更
	
		<sec:http>
			<sec:form-login login-page="/login"
				login-processing-url="/authenticate"
				username-parameter="uid"
				password-parameter="pwd" />
			<sec:intercept-url pattern="/login"
				access="permitAll" />
			<sec:intercept-url pattern="/authenticate"
				access="permitAll" />
			<sec:intercept-url pattern="/**"
				access="isAuthenticated()" />
		</sec:http>
	

【9.4.3:認証成功時のレスポンス】

・(2018.11.11)デフォルト動作のカスタマイズ(JavaConfig)

	<groupId>example</groupId>
	<artifactId>default-target-url</artifactId>

　ベース：9.4.2:from-login

　（コメント）
　
　	/　（拒否）⇒　/login　(成功)⇒　/
　	/login　成功⇒　/menu
　	
　	のような流れとなる
　	
　(コメント）
　
	WebSecurtyConfigクラスでは以下のように設定：
	
		@Override
	    protected void configure(HttpSecurity http) throws Exception {
	            http.formLogin()
	            		.loginPage("/login")
	            		.permitAll()
	            		.defaultSuccessUrl("/menu");	// 2018.11.11 add
	            http.authorizeRequests()
	            		.anyRequest().authenticated();
	    }
	
		@Override
		protected void configure(AuthenticationManagerBuilder auth) throws Exception {
			auth
			// enable in memory based authentication with a user named
			// "guest" and "admin"
			.inMemoryAuthentication()
			.withUser("guest").password("guest").roles("USER").and()
			.withUser("admin").password("admin").roles("USER", "ADMIN");
		}

		@SuppressWarnings("deprecation")
		@Bean
		PasswordEncoder passwordEncoder() {
			//return new BCryptPasswordEncoder();
			return NoOpPasswordEncoder.getInstance(); // tempolary use
		}
　
　
・(2018.11.11)デフォルト動作のカスタマイズ(XMLConfig)

	<groupId>example</groupId>
	<artifactId>default-target-url-xml</artifactId>

　ベース：9.4.2:from-login-xml、9.4.3:default-target-url
　
　
【9.4.4:認証失敗時のレスポンス】

・(2018.10.21、2018.11.07)認証失敗時のレスポンス(JavaConfig)

	<groupId>example</groupId>
	<artifactId>failure-url</artifactId>

　ベース：9.4.2:from-login

　(2018.11.07:コメント）
　
	in-memoryの認証を追加
	WebSecurityConfigクラスのconfigure(HttpSecurity)メソッドを変更：
	参考：
		https://docs.spring.io/spring-security/site/docs/5.1.1.RELEASE/api/org/springframework/security/config/annotation/web/builders/HttpSecurity.html#formLogin--
		
		@Override
	    protected void configure(HttpSecurity http) throws Exception {
			http.formLogin()
					.loginPage("/login")
					.failureUrl("/loginFailure")
					.permitAll();
			http.authorizeRequests()
					.anyRequest().authenticated();
	    }
　

・(2018.10.27)認証失敗時のレスポンス(XML Config)

	<groupId>example</groupId>
	<artifactId>failure-url-xml</artifactId>

　ベース：9.4.2:from-login-xml, 9.4.4:failure-url

　(2018.11.08:コメント）
　
	in-memoryの認証を追加
	security-contex.xmlに以下のタグを追加

		<sec:authentication-manager>
			<sec:authentication-provider>
				<sec:user-service>
					<sec:user name="admin" password="admin" 
						authorities="ROLE_ADMIN,ROLE_USER" />
					<sec:user name="guest" password="guest" 
						authorities="ROLE_USER" />
				</sec:user-service>
				<sec:password-encoder ref="passwordEncoder" />
			</sec:authentication-provider>
		</sec:authentication-manager>

		<!-- use NoOpPasswordEnder instead of BCryptPasswordEncoder -->
		<bean id="passwordEncoder"
			class="org.springframework.security.crypto.password.NoOpPasswordEncoder" />


【9.4.5:データベース認証】

・(2018.10.28)データベース認証(JavaConfig)

	<groupId>example</groupId>
	<artifactId>dao-authentication-provider</artifactId>

　ベース：9.4.2:from-login、3.2.3:rowmapper、3.3.2:transactional

　コメント：
　
	・BCryptPasswordEncoderの代わりに、NoOpPasswordEncoderを使用
	
	・WebSecurityConfigクラスのconfigureAuthenticationManagerメソッドは、
	configureメソッドの間違いではないかと思われる

		see https://docs.spring.io/spring-security/site/docs/4.2.5.RELEASE/apidocs/org/springframework/security/config/annotation/web/configuration/WebSecurityConfigurerAdapter.html 

		@Autowired
		void configureAuthenticationManager(AuthenticationManagerBuilder auth) 
				throws Exception {
			auth.userDetailsService(userDetailsService)
				.passwordEncoder(passwordEncoder());
		}
			↓
		@Override
		protected void configure(AuthenticationManagerBuilder auth) 
				throws Exception {
			auth.userDetailsService(userDetailsService)
				.passwordEncoder(passwordEncoder());
		}

・(2018.10.28、2018.11.03)データベース認証(XML　Config)

	<groupId>example</groupId>
	<artifactId>dao-authentication-provider-xml</artifactId>

　ベース：9.4.5:dao-authentication-provider、9.4.2:from-login-xml、3.2.3:rowmapper、3.3.2:xml-config

　コメント：
　
	・BCryptPasswordEncoderの代わりに、NoOpPasswordEncoderを使用


・(2018.11.03)Userクラスを継承したUserDetailsの実装(JavaConfig)

	<groupId>example</groupId>
	<artifactId>user</artifactId>

　ベース：9.4.5:dao-authentication-provider
　

【9.4.6:パスワードのハッシュ化】

・(2018.11.05)BCryptPasswordEncoder(JavaConfig)

	<groupId>example</groupId>
	<artifactId>bcryptpasswordencoder</artifactId>

　ベース：9.4.5:dao-authentication-provider

・(2018.11.06)BCryptPasswordEncoder(XML Config)

	<groupId>example</groupId>
	<artifactId>bcryptpasswordencoder-xml</artifactId>

　ベース：9.4.5:dao-authentication-provider-xml, 9.4.6:bcryptpasswordencoder

【9.4.7:認証イベントのハンドリング】

・(2018.11.11)イベントリスナの作成(JavaConfig)

	<groupId>example</groupId>
	<artifactId>handle-bad-credentials</artifactId>

　ベース：9.4.2:form-login

【9.4.8:ログアウト】

・(2018.11.11)ログアウト(JavaConfig)

	<groupId>example</groupId>
	<artifactId>logout</artifactId>

　ベース：9.4.2:form-login
　
　(2019.06.22：コメント)
　	
　	login、logoutの処理は以下のように流れる
　	
　	/　⇒(認可エラー)　/login　⇒(認証成功)　/
　	/　⇒(/logoutへpost、ログアウト処理)　/login?logout

　(2019.06.22：コメント）
　
　	STSでは、<button>エレメントはうまくsubmitできない
　	microsoft Edge ではうまくいく
　	
　	
・(2018.11.11)ログアウト(XML　Config)

	<groupId>example</groupId>
	<artifactId>logout-xml</artifactId>

　ベース：9.4.2:form-login-xml、9.4.8:logout

・(2018.11.11)デフォルト動作のカスタマイズ(JavaConfig)

	<groupId>example</groupId>
	<artifactId>customized-logout</artifactId>

　ベース：9.4.8:logout

　(2019.06.22：コメント)
　	
　	login、logoutの処理は以下のように流れる
　	
　	/　⇒(認可エラー)　/login　⇒(認証成功)　/
　	/　⇒(/auth/logoutへpost、ログアウト処理)　/login?logout

・(2018.11.12)デフォルト動作のカスタマイズ(XML Config)

	<groupId>example</groupId>
	<artifactId>customized-logout-xml</artifactId>

　ベース：9.4.8:logout-xml


【9.4.9:ログアウト成功時のレスポンス】

・(2018.11.11)ログアウト成功時に遷移するパス(JavaConfig)

	<groupId>example</groupId>
	<artifactId>logout-success-url</artifactId>

　ベース：9.4.8:logout

　(2019.06.22：コメント)
　	
　	login、logoutの処理は以下のように流れる
　	
　	/　⇒(認可エラー)　/login　⇒(認証成功)　/
　	/　⇒(/logoutへpost、ログアウト処理)　/logoutSuccess

・(2018.11.11)ログアウト成功時に遷移するパス(XML Config)

	<groupId>example</groupId>
	<artifactId>logout-success-url-xml</artifactId>

　ベース：9.4.8:logout-xml, 9.4.9:logout-success-url


【9.4.10:認証情報へのアクセス】

・(2018.11.14)認証情報へのアクセス(JavaConfig)

  <groupId>example</groupId>
  <artifactId>authentication-info</artifactId>

　ベース：9.4.6:bcryptpasswordencoder, 9.4.8:logout

　(2019.06.22：コメント)
　	
　	login、logoutの処理は以下のように流れる
　	
　	/　⇒(認可エラー)⇒　/login　⇒(認証成功)⇒　/(ここで認証情報を使う)
　	/　⇒(/logoutへpost、ログアウト処理)⇒　/login?logout


【9.4.11:認証処理とSpring MVCの連携】

・(2018.11.15)認証情報とSpringMVCの連携(JavaConfig)

	<groupId>example</groupId>
	<artifactId>authentication-springmvc</artifactId>

　ベース：9.4.10:authentication-info

　(2019.06.22：コメント)
　	
　	login、profile出力の処理は以下のように流れる
　	
　	/　⇒(認可エラー)⇒　/login　⇒(認証成功)⇒　/(ここで認証情報を使う)
　	/　⇒(/profileをGET)⇒　/profile(認証情報を引数に引き渡し)


・(2018.11.16)認証情報とSpringMVCの連携(XML Config)

	<groupId>example</groupId>
	<artifactId>authentication-springmvc-xml</artifactId>

　ベース：9.4.6:bcryptpasswordencoder-xml, 9.4.8:logout-xml, 
　			9.4.10:authentication-info, 9.4.11:authentication-springmvc

【9.4.12:エラーメッセージ】

・(2018.11.16)エラーメッセージの変更(JavaConfig)

	<groupId>example</groupId>
	<artifactId>modify-errormessage</artifactId>

　ベース：9.4.11:authentication-springmvc

　（messages.propertiesの設定）
　
	AbstractUserDetailsAuthenticationProvider.badCredentials = 入力した認証情報に誤りがあります。
	AbstractUserDetailsAuthenticationProvider.credentialsExpired = 認証情報の利用期限が切れています。
	AbstractUserDetailsAuthenticationProvider.disabled = 無効なアカウントです。
	AbstractUserDetailsAuthenticationProvider.expired = アカウントの利用期限が切れています。
	AbstractUserDetailsAuthenticationProvider.locked = アカウントがロックされています。

　（insert-init-data.sqlの設定）

	--  enabled
	--         account_non_expired
	--                credentials_non_expired
	--                       account_non_locked
	--                              admin   
	INSERT INTO account VALUES ('guest', '$2a$10$IGr6WwwMYT9yjGMHZygOYeCF2POdgqrYV2YlY2n0UhLx7M6lTqigm', 
		TRUE,  TRUE,  TRUE,  TRUE,  FALSE, 'U001', '(guest)');
	INSERT INTO account VALUES ('admin', '$2a$10$uyXIQe9yhzo1kt08DcXRfeIqax43O2cD6puA5626fnslCVFcjEo.S', 
		TRUE,  TRUE,  TRUE,  TRUE,  TRUE, 'U002', '(admin)');
	INSERT INTO account VALUES ('disabled', '$2a$10$za2id1t3HP2/hH2LRdsDNObDKilwF0AW77OuG7By7MrmLUutn54Va', 
		FALSE, TRUE,  TRUE,  TRUE,  FALSE, 'U003', '(disabled)');
	INSERT INTO account VALUES ('account-expired', '$2a$10$d6QT0tGhQgB2vCRD3B1Qy.8GvusCwtZt8P.pf0kN0wkI.1B7fhe7m', 
		TRUE,  FALSE, TRUE,  TRUE,  FALSE, 'U004', '(account-expired)');
	INSERT INTO account VALUES ('credentials-expired', '$2a$10$JKWGZ5cBZKP/oVyZqOIX1uKNdOPkWfV/DHthlut5SFl4B4xl9dKCG', 
		TRUE,  TRUE,  FALSE, TRUE,  FALSE, 'U005', '(credentials-expired)');
	INSERT INTO account VALUES ('account-locked', '$2a$10$x/0h5P5qqn38dnLjNXpp/.sXTkldY40z6tb.7LFmcxRhMOWJsFfbC', 
		TRUE,  TRUE,  TRUE,  FALSE, FALSE, 'U006', '(account-locked)');


【9.5:認可処理の適用】

【9.5.3:Webリソースへの認可（JavaConfig編）】

・(2018.11.17、2018.11.18）アクセスポリシーを適用するWebリソースの指定

	<groupId>example.com</groupId>
	<artifactId>authority-webresource</artifactId>

　ベース：9.4.8:logout
　
　（コメント）
　
	jspのデフォルトパスの指定では、先頭に"/"が必要
	（9.4のコード例には同じ間違いがある）

		public void configureViewResolvers(ViewResolverRegistry registry) {
			registry.jsp().prefix("/views/");	// see 5.9.2 for prefix()
				// 2018.11.17 : root "/" required
		}
	
・(2018.11.17、2018.11.18）アクセスポリシーの指定

	<groupId>example.com</groupId>
	<artifactId>authority-accesspolicy</artifactId>

　ベース：9.5.3:authority-webresource
　
　（コメント）
　
　	Exression　hasIpAddress('127.0.0.1')がうまく動作しない(falseとなる)
　	参考：
　		https://stackoverflow.com/questions/39516284/cant-get-hasipaddress-working-on-spring-security
　	原因：
　		loopbackアドレスを指定すると、hasIpAddressにヒットしない模様
　	対策：
　		ローカルアドレスを指定して（ipconfigコマンドで調べる）、haIpAddressの引数、
　		及び、ブラウザのホストパーツに指定する
　	

【9.5.4:Webリソースへの認可（XMLファイル編）】

・(2018.11.18）アクセスポリシーを適用するWebリソースの指定

	<groupId>example.com</groupId>
	<artifactId>authority-webresource-xml</artifactId>

　ベース：9.4.8:logout-xml、9.5.3:authority-webresource

・(2018.11.18）アクセスポリシーの指定

	<groupId>example.com</groupId>
	<artifactId>authority-accesspolicy-xml</artifactId>

　ベース：9.5.4:authority-webresource-xml、9.5.3:authority-accesspolicy


【9.5.5:メソッドへの認可】

・(2018.11.18、2018.11.22、2019.06.23）メソッド実行前に適用するアクセスポリシーの指定

	<groupId>example.com</groupId>
	<artifactId>preauthorize</artifactId>

　ベース：9.4.11:authentication-springmvc

　(2019.06.23:schema.sql）
　
　データベースのスキーマは以下：

	CREATE TABLE account (
	  username		VARCHAR(20) NOT NULL PRIMARY KEY,
	  password		VARCHAR(128) NOT NULL,
	  enabled		boolean	NOT NULL,
	  admin			boolean	NOT NULL,
	  user_uuid		VARCHAR(20) NOT NULL,
	  last_name		VARCHAR(20) NOT NULL
	);

　(コメント)
　
　	＠PreAuthorizeが機能していない（SpELを満たさない時もメソッドが実行される）

	対策：
	
　	＠EnableGlobalMethodSecurityを、WebSecurityConfigクラスからWebMvcConfigに移動することで
　	解決（原因は不明）

	参考：https://stackoverflow.com/questions/29643183/spring-security-preauthorize-not-working
　		https://stackoverflow.com/questions/32442408/preauthorize-not-working-on-controller

　(2019.06.23：コメント続き）　

	・参考：https://stackoverflow.com/questions/32442408/preauthorize-not-working-on-controller
	の記述とは異なり、@PreAuthorizeアノテーションをつけるメソッドは、
	インターフェースである必要はない
	元々のAccountService/AccountServiceImplペアを、POJOなAccountServiceクラスに変更した

	・相変わらず、＠EnableGlobalMethodSecurityをWebMvcConfigに移動する必要はある


・(2018.11.23、2019.06.23）メソッド実行後に適用するアクセスポリシーの指定

	<groupId>example.com</groupId>
	<artifactId>postauthorize</artifactId>

　ベース：9.5.5:preauthorize
　
　(2019.06.23:schema.sql）
　
　データベースのスキーマは以下：

	CREATE TABLE account (
	  username				VARCHAR(20) NOT NULL PRIMARY KEY,
	  password				VARCHAR(128) NOT NULL,
	  enabled				boolean	NOT NULL,
	  admin					boolean	NOT NULL,
	  user_uuid				VARCHAR(10) NOT NULL,
	  last_name				VARCHAR(20) NOT NULL,
	  department_code		VARCHAR(10) NOT NULL,
	  department_manager	boolean NOT NULL
	);
　
【9.5.6:JSPの画面項目への認可】

・(2018.11.20）アクセスポリシーの定義

	<groupId>example.com</groupId>
	<artifactId>authority-jsp-accesspolicy</artifactId>

　ベース：9.5.3:authority-webresource
　
・(2018.11.20）Webリソースに指定したアクセスポリシーと連動

	<groupId>example.com</groupId>
	<artifactId>authority-jsp-webresource</artifactId>

　ベース：9.5.6:authority-jsp-accesspolicy

【9.5.7:認可エラー時のレスポンス】

・(2018.11.20）認可エラー時の遷移先（JavaConfig）

	<groupId>example.com</groupId>
	<artifactId>access-denied-page</artifactId>

　ベース：9.5.3:authority-webresource
　
・(2018.11.20）認可エラー時の遷移先（XMLConfig）

	<groupId>example.com</groupId>
	<artifactId>access-denied-page-xml</artifactId>

　ベース：9.5.3:authority-webresource-xml, 9.5.7:access-denied-page

【9.6:CSRF対策】

【9.6.2:CSRF対策機能の適用】

・(2018.11.23）HTMLフォーム使用時のトークン値の連携

	<groupId>example.com</groupId>
	<artifactId>csrf-input</artifactId>

　ベース：9.5.7:access-denied-page
　
【9.6.3:トークンチェックエラー時のレスポンス】

・(2018.11.23、2018.11.24）トークンチェックエラー時のレスポンス

	<groupId>example.com</groupId>
	<artifactId>csrf-token-error</artifactId>

　ベース：9.6.2:csrf-input
　参考：　9.5.7:■デフォルト動作のカスタマイズ
　	
【9.6.4:CSRF対策機能とSpring　MVCとの連携】

・(2018.11.24）CSRF対策機能とSpring　MVCとの連携

	<groupId>example.com</groupId>
	<artifactId>csrf-springmvc</artifactId>

　ベース：9.5.6:authority-jsp-webresource
　
【9.7:セッション管理】

【9.7.3:セッション固定攻撃対策】

・(2019.06.26）セッション固定攻撃への対策オプションをnone指定（JavaConfig）

	<groupId>example.com</groupId>
	<artifactId>sessionfixation-none</artifactId>

　ベース：9.7.5:invalid-session
　
　（実行結果）
　
　	cromeで動作確認を実施
　	
	①アプリを起動
	②/にアクセス
		/loginに遷移
		JSESSIONIDが作成されている（48）
	③guestでログイン
		/に遷移
		JSESSIONIDは変更されていない(48)
	④ログアウト
		/loginに遷移
		JSESSIONIDは変更される（38）：一旦、セッションが破壊されるためと思われる
		
・(2019.06.26）セッション固定攻撃への対策オプションをnewSession指定（JavaConfig）

	<groupId>example.com</groupId>
	<artifactId>sessionfixation-newsession</artifactId>

　ベース：9.7.3:sessionfixation-none
　
　（実行結果）
　
　	cromeで動作確認を実施
　	
	①アプリを起動
	②/にアクセス
		/loginに遷移
		JSESSIONIDが作成されている（42）
	③guestでログイン
		/に遷移
		JSESSIONIDは変更されている(3E)
	④ログアウト
		/loginに遷移
		JSESSIONIDは変更される（FC）
	⑤adminでログイン
		/に遷移
		JSESSIONIDは変更されている(95)
		

【9.7.5:無効なセッションを使ったリクエストの検知】

・(2018.11.23）無効なセッションを使ったリクエストの検知（JavaConfig）

	<groupId>example.com</groupId>
	<artifactId>invalid-session</artifactId>

　ベース：9.5.6:authority-jsp-accesspolicy
　
　（セッションタイムアウトの設定）

	参照：https://terasolunaorg.github.io/guideline/5.2.0.RELEASE/ja/Security/SessionManagement.html#springsecuritysessionmanagementtimeout	
	
	web.xmlにセッションタイムアウトの設定を行う(以下は、1分のタイムアウト)
	　
  	<!-- 2018.11.24 add -->
	<session-config>
		<session-timeout>1</session-timeout>
	</session-config>

　（コメント）
　
	以下の問題が発生
	
		①最初にルートにアクセスするとinvalidSessionエラーページに飛ぶ
		②同様に、ログアウトするinvalidSessionエラーページに飛ぶ

	原因
	
		①はセッションができないときにアクセスしているため、
		（invalid-sesion/loginから入るようにする）
	
		②は、ログアウト時にセッションを破壊するため、invalidSessionのチェックに引っかかるため
	
	対策
	
		②については、ログアウトの設定時にinvalidSessionのチェックを無効とする
		参考：https://stackoverflow.com/questions/2601013/spring-security-redirect-to-invalid-session-url-instead-of-logout-success-url-o
		
	
	最終的に、WebSecurityConfigのconfigure(HttpSecurity http)を以下のように設定した

	protected void configure(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage("/login")
			.permitAll();

		http.logout()
			.invalidateHttpSession(false).permitAll();
			// 2018.11.24 add: .invalidateHttpSession(false)

		// 2018.11.24 add
		http.authorizeRequests()
			.antMatchers("/admin/accounts/**").hasRole("ACCOUNT_MANAGER")
			.antMatchers("/admin/**").hasRole("ADMIN")
			.antMatchers("/error/**").permitAll() // 2018.11.24 add
			.anyRequest().authenticated();

		// 2018.11.24 add
		http.sessionManagement().invalidSessionUrl("/error/invalidSession");
	}

　(2019.06.25：コメント)
　
	・ログアウト時のセッション無効化を再度有効にして、cromeのセッションの動作を確認
　	(セッションタイムアウトに引っかからないように実行する）
　	
	①アプリを起動
	②ルート画面（/）にアクセス
		⇒セッションが無効なので、/error/invalidSessionに遷移
		JSESSIONIDクッキーの値が設定されている
	③ログイン画面(/login)をGET
		⇒/login画面に遷移
		JSESSIONIDの値は変化しない
	④adminアカウントでログイン
		⇒/に遷移
		JSESSIONIDが変わる
	⑤AdminMenu画面をGET
		⇒/admin/menuに遷移
		JSESSIONIDは変わらない
	⑥ログアウトボタン
		⇒/error/invalidSessionに遷移
		JSESSIONIDクッキーの値が変更されている
	⑦ログイン画面(/login)をGET
		⇒/login画面に遷移
		JSESSIONIDの値は変化しない
	⑧guestアカウントでログイン
		⇒/に遷移
		JSESSIONIDが変わる

	・セッションタイムアウトの確認
	
	①アプリを起動
	②ルート画面（/）にアクセス
		⇒セッションが無効なので、/error/invalidSessionに遷移
		JSESSIONIDクッキーの値が設定されている
	③ログイン画面(/login)をGET
		⇒/login画面に遷移
		JSESSIONIDの値は変化しない
	④adminアカウントでログイン
		⇒/に遷移
		JSESSIONIDが変わる
	⑤ここで1分以上待機
	⑥AdminMenu画面をGET
		⇒/error/invalidSessionに遷移


・(2018.11.25）無効なセッションを使ったリクエストの検知（XMLConfig）

	<groupId>example.com</groupId>
	<artifactId>invalid-session-xml</artifactId>

　ベース：9.5.4:authority-webresource-xml、9.5.6:authority-jsp-webresource
　		9.7.5:invalid-session
　
　（コメント）
　
　	security-conten.xmlは以下のように設定
　	
	<sec:http>
		<!-- 2018.11.25 add -->
		<sec:session-management invalid-session-url="/error/invalidSession" />

		<sec:form-login login-page="/login" />
		<sec:logout invalidate-session="false" /> <!-- 2018.11.24 add: invalid-session -->
		
		<sec:intercept-url pattern="/login" access="permitAll" />
		<sec:intercept-url pattern="/logout" access="permitAll" />
		<sec:intercept-url pattern="/admin/accounts/**" access="hasRole('ACCOUNT_MANAGER')" />
		<sec:intercept-url pattern="/admin/**" access="hasRole('ADMIN')" />
		<sec:intercept-url pattern="/error/**" access="permitAll" /> <!-- 2018.11.24 add -->
		<sec:intercept-url pattern="/**" access="isAuthenticated()" />
	</sec:http>
　	

【9.8:ブラウザのセキュリティ対策機能との連携】

【9.8.3:セキュリティヘッダーの選択】

・(2018.11.25）セキュリティヘッダーの選択（JavaConfig）

	<groupId>example.com</groupId>
	<artifactId>select-security-header</artifactId>

　ベース：9.4.8:logout

　(2019.06.28:コメント)
　
　	Chromeで確認したところ、
　	HTTPでアクセスするためか、String-Transport-Securityヘッダーが出力されない
　
　
・(2018.11.26）セキュリティヘッダーの選択（XML Config）

	<groupId>example.com</groupId>
	<artifactId>select-security-header-xml</artifactId>

　ベース：9.4.8:logout-xml

・(2018.11.26）不要なものだけを無効化選択（JavaConfig）

	<groupId>example.com</groupId>
	<artifactId>disable-security-header</artifactId>

　ベース：9.8.3:select-security-header

・(2018.11.26）不要なものだけを無効化選択（XML Config）

	<groupId>example.com</groupId>
	<artifactId>disable-security-header-xml</artifactId>

　ベース：9.8.3:select-security-header-xml

　(コメント)
　
　	security-context.xmlは以下のように設定
　	
	<sec:http>
		・・・
		<!-- 2018.11.26 add -->
		<sec:headers>
			<sec:cache-control disabled="true"/>
		</sec:headers>
	</sec:http>
　	
【9.9:Spring Securityのテスト】

【9.9.2:認証処理のテスト】

・(2018.11.28）フォーム認証、ログアウトのテスト

	<groupId>example.com</groupId>
	<artifactId>test-formlogin-logout</artifactId>

　ベース：9.4.8:logout
　
　(2019.06.30:コメント)
　
　	・WebApplicationContextについては、4.3.3：DIコンテナとの連携　を参照
　
　	・テストクラスにつけられた@WebAppConfigurationアノテーションは、テストクラスに
　	　WebApplicationContextがロードされることを示す
　	　
　	　	参照：
　	　	https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/web/WebAppConfiguration.html
　	　	
　	・status().isFount()の部分は、
　		status()が、MockMvcResultMatchersクラスのstaticメソッド
　		isFount()は、status()の戻り値型MockMvcResultMatchersのメソッドで、
　		ステータスコードが、FOUND (302)であることを確認する
　		
　		参照：
　		https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/web/servlet/result/MockMvcResultMatchers.html
　		https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/web/servlet/result/MockMvcResultMatchers.html

	・authenticated().withRoles("USER")の部分は、
		authenticated()が、SecurityMockMvcResultMatchersのstaticメソッド
		withRoles()が、autenticated()の戻り値型
			SecurityMockMvcResultMatchers.AuthenticatedMatcher
			のメソッド
			
			
【9.9.3:認可処理のテスト】

・(2018.11.28、2018.11.30）アノテーションを使用した認証情報のセットアップ

	<groupId>example.com</groupId>
	<artifactId>test-preauthorize</artifactId>

　ベース：9.4.5:user
　参考：9.4.8:ログアウト、3.2.3:「BeanPropertyMapperを利用したDaoクラスの実装」
　		9.5.5:メソッドへの認可、9.5.7:■認可エラー時の遷移先、
　		9.9.1:Spring Security Test のセットアップ

　(2019.06.30:テスト追加)
　
　	認証情報を設定せずにメソッドを呼び出すテストを追加
　	
		// 2019.06.30 add
		@Test(expected = AuthenticationCredentialsNotFoundException.class)
		public void testAddMessageByNobody() throws Exception {
			service.addMessage("Message!");
		}


・(2018.12.01）RequestPostProcessorを使用した認証情報のセットアップ

	<groupId>example.com</groupId>
	<artifactId>requestpostprocessor</artifactId>

　ベース：9.9.3:test-preauthorize、9.9.1:test-formlogin-logout

　参考：9.5.3:Webリソースへの認可（JavaConfig編）、
　		9.5.6:■Webリソースに指定したアクセスポリシーとの連動
　		9.9.1:Spring Security Testのセットアップ
　
　(2019.06.30:コメント)
　
　	・post("/messages").with(user("admin").roles("ADMIN"))の部分は、
　		post()は、MockMvcRequestBuildersのstaticメソッド
　		with()は、post()の戻り値型MockHttpServletRequestBuilderのメソッド
　			(with()の引数型は、RequestPostProcessorインターフェース)
　		user()は、SecurityMockMvcRequestPostProcessorsのstaticメソッド
　		roles()は、user()の戻り値型
　			SecurityMockMvcRequestPostProcessors.UserRequestPostProcessor
　			のメソッド
