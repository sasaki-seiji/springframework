【2.1.3:Configuration方法】

・（2018.03.16）JavaベースConfiguration

	<groupId>example.beandef</groupId>
	<artifactId>java-config</artifactId>

・（2018.03.16）XMLベースConfiguraton

	<groupId>example.beandef</groupId>
	<artifactId>xml-config</artifactId>

・（2018.03.16、2018.03.21）アノテーションベースConfiguraton（Java-config）

  <groupId>example.beandef</groupId>
  <artifactId>annotation-config-java</artifactId>

・（2018.03.21）アノテーションベースConfiguraton（XML）

  <groupId>example.beandef</groupId>
  <artifactId>annotation-config-xml</artifactId>

【2.1.4:インジェクションの種類】

・（2018.03.16）セッターインジェクション（Javaベースコンフィギュレーション）

  <groupId>example.inject</groupId>
  <artifactId>setter-java</artifactId>

・（2018.03.16）セッターインジェクション（XML）

  <groupId>example.inject</groupId>
  <artifactId>setter-xml</artifactId>

・（2018.03.16）セッターインジェクション（アノテーションベースコンフィギュレーション）

  <groupId>example.inject</groupId>
  <artifactId>setter-annotation</artifactId>

・（2018.03.16）コンストラクタインジェクション（引数のindex指定）

  <groupId>example.inject</groupId>
  <artifactId>constructor-index</artifactId>

・（2018.03.16）コンストラクタインジェクション（引数名指定）

  <groupId>example.inject</groupId>
  <artifactId>constructor-argname</artifactId>

・（2018.03.16）フィールドインデックス

  <groupId>example.inject</groupId>
  <artifactId>field-inject</artifactId>

【2.1.5:オートワイヤリング】

・（2018.03.16）インジェクションを必須としないフィールドインジェクション

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-required-false</artifactId>

・（2018.03.16）Optionalを用いたフィールドインジェクション

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-optional</artifactId>

・（2018.03.16）@QualifierによるインジェクションするBeanの指定（Bean名）

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-qualifier-name</artifactId>

・（2018.03.16）@Primaryを指定

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-primary</artifactId>

・（2018.03.16）@QualifierによるインジェクションするBeanの指定（用途名）

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-qualifier-usage</artifactId>

・（2018.03.18）@Qualifierを付与した@KLightweightアノテーションによるフィールドインジェクション

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-lightweight-annotation</artifactId>

・（2018.03.18）@Resourceによるbeen名を明示的に指定したインジェクション

  <groupId>example.autowiring</groupId>
  <artifactId>resource-byname</artifactId>

・（2018.03.18）@Resource：フィールド名がbeen名に一致

  <groupId>example.autowiring</groupId>
  <artifactId>resource-fieldname</artifactId>

・（2018.03.18）@Resource：プロパティー名がbeen名に一致

  <groupId>example.autowiring</groupId>
  <artifactId>resource-propertyname</artifactId>

・（2018.03.20）IFインターフェースを実装したBeanをすべて取得

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-bean-collection</artifactId>

・（2018.03.20）コレクションのBean定義とインジェクション

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-collection-bean</artifactId>

【2.1.6:コンポネントスキャン】

・（2018.03.21）代入可能な型によるフィルタ（Java Config）

  <groupId>example.componentscan</groupId>
  <artifactId>scanfilter-assignable-java</artifactId>

・（2018.03.21）代入可能な型によるフィルタ（XML Config）

  <groupId>example.componentscan</groupId>
  <artifactId>scanfilter-assignable-xml</artifactId>

・（2018.03.21）正規表現によるフィルタ（Java Config）

  <groupId>example.componentscan</groupId>
  <artifactId>scanfilter-regex-java</artifactId>

・（2018.03.21）正規表現によるフィルタ（XML）

  <groupId>example.componentscan</groupId>
  <artifactId>scanfilter-regex-xml</artifactId>

・（2018.03.21）デフォルトのコンポーネントスキャンを無効化（Java Config）

  <groupId>example.componentscan</groupId>
  <artifactId>scanfilter-notusedefaultfilters-java</artifactId>

・（2018.03.21）デフォルトのコンポーネントスキャンを無効化（XML）

  <groupId>example.componentscan</groupId>
  <artifactId>scanfilter-notusedefaultfilters-xml</artifactId>

・（2018.03.21）スキャン対象から除外するコンポーネントを指定（Java Config）

  <groupId>example.componentscan</groupId>
  <artifactId>scanfilter-exclude-java</artifactId>

・（2018.03.21）スキャン対象から除外するコンポーネントを指定（XML）

  <groupId>example.componentscan</groupId>
  <artifactId>scanfilter-exclude-xml</artifactId>

【2.1.7:Beanのスコープ】

・（2018.03.22）UserServiceをprototypeスコープで登録する（JavaConfig）

  <groupId>example.scope</groupId>
  <artifactId>scope-prototype-java</artifactId>

・（2018.03.22）UserServiceをprototypeスコープで登録する（XML）

  <groupId>example.scope</groupId>
  <artifactId>scope-prototype-xml</artifactId>

・（2018.03.22）UserServiceをprototypeスコープで登録する（アノテーション）

  <groupId>example.scope</groupId>
  <artifactId>scope-prototype-annotation</artifactId>

・（2018.03.24）singletonスコープのBean内でprototypeスコープのBeanをインジェクション

  <groupId>example.scope</groupId>
  <artifactId>different-scope-inject</artifactId>

・（2018.03.24）getBeanを利用したBeanの取得

  <groupId>example.lookupmethod</groupId>
  <artifactId>lookupmethod-container</artifactId>

・（2018.03.24）ルックアップメソッドインジェクションを利用したBeanの取得（@Component）

  <groupId>example.lookupmethod</groupId>
  <artifactId>lookupmethod-inject-annotation</artifactId>

・（2018.03.24）ルックアップメソッドインジェクションを利用したBeanの取得（XML）

  <groupId>example.lookupmethod</groupId>
  <artifactId>lookupmethod-inject-xml</artifactId>

・（2018.03.24）Scoped　Proxyを有効にするJava　Config

  <groupId>example.scopedproxy</groupId>
  <artifactId>scopedproxy-java</artifactId>

（問題）

WEB環境をセットアップしてないため、以下のエラーが発生する

Exception in thread "main" java.lang.IllegalStateException: No Scope registered for scope name 'request'

【2.1.8:Beanのライフサイクル】

・（2018.03.25）@PostConstructアノテーション

  <groupId>example.beanlifecycle</groupId>
  <artifactId>postconstruct-annotation</artifactId>

・（2018.03.25）InitializingBeanの実装

  <groupId>example.beanlifecycle</groupId>
  <artifactId>postconstruct-initializingbean</artifactId>

・（2018.03.25）Bean定義時に初期化メソッドを指定（JavaConfig）

  <groupId>example.beanlifecycle</groupId>
  <artifactId>postconstruct-initmethod-java</artifactId>

・（2018.03.25）Bean定義時に初期化メソッドを指定（XML）

  <groupId>example.beanlifecycle</groupId>
  <artifactId>postconstruct-initmethod-xml</artifactId>

・（2018.03.25）@PreDestroyアノテーション

  <groupId>example.beanlifecycle</groupId>
  <artifactId>predestroy-annotation</artifactId>

・（2018.03.25）DisposableBeanの実装

  <groupId>example.beanlifecycle</groupId>
  <artifactId>predestroy-disposablebean</artifactId>

・（2018.03.25）Bean定義時に破棄メソッドを指定（JavaConfig）

  <groupId>example.beanlifecycle</groupId>
  <artifactId>predestroy-destroymethod-java</artifactId>

・（2018.03.25）Bean定義時に破棄メソッドを指定（XML）

  <groupId>example.beanlifecycle</groupId>
  <artifactId>predestroy-destroymethod-xml</artifactId>

・（2018.03.28）DIコンテナを破棄(closeメソッド）

  <groupId>example.beanlifecycle</groupId>
  <artifactId>destroydicontainer-close</artifactId>

・（2018.03.28）try-with-resoures文を利用したDIコンテナの破棄

  <groupId>example.beanlifecycle</groupId>
  <artifactId>destroydicontainer-trywithresources</artifactId>

・（2018.03.28）JVMのシャットダウン時にDIコンテナを破棄

  <groupId>example.beanlifecycle</groupId>
  <artifactId>destroydicontainer-shutdownhook</artifactId>

【2.1.9:Configurationの分割】

・（2018.03.29）JavaConfigの分割

  <groupId>example.config</groupId>
  <artifactId>separate-java-config</artifactId>

・（2018.03.29）XMLベースConfigurationの分割

  <groupId>example.config</groupId>
  <artifactId>separate-xml-config</artifactId>
  
【2.1.10:Configurationのプロファイル化】

・（2018.03.30）プロファイル名を指定したJavaConfig

  <groupId>example.config</groupId>
  <artifactId>profile-java-config</artifactId>

・（2018.03.30）複数のプロファイルを指定したXML

  <groupId>example.config</groupId>
  <artifactId>profile-xml-config</artifactId>

・（2018.03.30）プロファイル名を指定したアノテーションによるBean定義

  <groupId>example.config</groupId>
  <artifactId>profile-annotaion-config</artifactId>

【2.1.11:JSR330：Dependency Injection for Java】

・（2018.03.31）BeanのデフォルトスコープをprototypeにするJava Config

  <groupId>example.config</groupId>
  <artifactId>jsr330-java-config</artifactId>

・（2018.03.31）BeanのデフォルトスコープをprototypeにするXML

  <groupId>example.config</groupId>
  <artifactId>jsr330-xml-config</artifactId>

【2.2.2:Spring AOP】

・（2018.04.01）Aspectの実装例（JavaConfig)

  <groupId>example.aspect</groupId>
  <artifactId>simple-aop</artifactId>

・（2018.04.01）Aspectの実装例（XML　Config)

  <groupId>example.aspect</groupId>
  <artifactId>simple-aop-xml</artifactId>

【2.2.3:Adviceの実装方法】

・（2018.04.01）AfterReturningを用いたPointcutの指定例（戻り値を利用する)

  <groupId>example.aspect</groupId>
  <artifactId>advice-after-returning</artifactId>

・（2018.04.01）AfterThrowingを用いたPointcutの指定例

  <groupId>example.aspect</groupId>
  <artifactId>advice-after-throwing</artifactId>

・（2018.04.01）AfterThrowingを用いた例外の変換

  <groupId>example.aspect</groupId>
  <artifactId>advice-after-throwing-propagate</artifactId>

・（2018.04.01）Afterを用いたPointcutの指定例

  <groupId>example.aspect</groupId>
  <artifactId>advice-after</artifactId>

・（2018.04.01）Aroundを用いたPointcutの指定例

  <groupId>example.aspect</groupId>
  <artifactId>advice-around</artifactId>

【2.2.4:XML で Adviceを定義】

・（2018.04.02）XMLにおけるBefore　Adviceの指定例

  <groupId>example.aspect</groupId>
  <artifactId>advice-xml-config</artifactId>

【2.2.5:Pointcut式】

・(2018.04.03)型で対象のJoin　Pointを選択する

  <groupId>example.aspect</groupId>
  <artifactId>pointcut-within</artifactId>

・(2018.04.03)名前付きPointcut

  <groupId>example.aspect</groupId>
  <artifactId>named-pointcut</artifactId>

（コメント）以下のエラーが出る

	can't find referenced pointcut inDomainLayer

・(2018.04.03)JoinPointから対象オブジェクトや引数を取得

  <groupId>example.aspect</groupId>
  <artifactId>joinpoint-target</artifactId>

・(2018.04.03)target式やargs式を用いて対象オブジェクトや引数を取得

  <groupId>example.aspect</groupId>
  <artifactId>joinpoint-target-expr</artifactId>

【2.3:データバインディングと型変換】

【2.3.3:PropertyEditorの利用】

・(2018.04.08)boolean用のPropertyEditor

  <groupId>example.convert</groupId>
  <artifactId>property-editor</artifactId>

【2.3.4:ConversionServiceの利用】

・(2018.04.08)DefaultFormattingConversionServiceを利用したLocalDateの変換

  <groupId>example.convert</groupId>
  <artifactId>conversion-service</artifactId>

・(2018.04.08)FormattingConversionServiceFactoryBeanを利用したLocalDateの変換（XML-config）

  <groupId>example.convert</groupId>
  <artifactId>conversion-service-xml</artifactId>

【2.4:プロパティー管理】

・(2018.04.07)設定値をソースコード中に直書きしたDataSource定義

  <groupId>example.property</groupId>
  <artifactId>hardcode</artifactId>

【2.4.1:Bean定義内でプロパティの使用】

・(2018.04.07)@Valueによる設定値のインジェクションを利用したDataSource定義

  <groupId>example.property</groupId>
  <artifactId>value-annotation</artifactId>

・(2018.04.07)XMLファイルにおけるプレースホルダを用いたDataSource定義

  <groupId>example.property</groupId>
  <artifactId>xmlconfig-placeholder</artifactId>

・(2018.04.07)XMLファイルにおけるプロパティファイルのデフォルト値の設定

  <groupId>example.property</groupId>
  <artifactId>xmlconfig-placeholder-default</artifactId>

【2.4.2:Beanにプロパティをインジェクション】

・(2018.04.07)Java　ConfigにおけるBean定義でプロパティファイルの値をバインディングする

  <groupId>example.property</groupId>
  <artifactId>field-inject</artifactId>
