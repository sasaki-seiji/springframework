【2.1.3:Configuration方法】

・（2018.03.16）JavaベースConfiguration

	<groupId>example.beandef</groupId>
	<artifactId>java-config</artifactId>

・（2018.03.16）XMLベースConfiguraton

	<groupId>example.beandef</groupId>
	<artifactId>xml-config</artifactId>

・（2018.03.16、2018.03.21）アノテーションベースConfiguraton（Java-config）

  <groupId>example.beandef</groupId>
  <artifactId>annotation-config-java</artifactId>

・（2018.03.21）アノテーションベースConfiguraton（XML）

  <groupId>example.beandef</groupId>
  <artifactId>annotation-config-xml</artifactId>

【2.1.4:インジェクションの種類】

・（2018.03.16）セッターインジェクション（Javaベースコンフィギュレーション）

  <groupId>example.inject</groupId>
  <artifactId>setter-java</artifactId>

・（2018.03.16）セッターインジェクション（XML）

  <groupId>example.inject</groupId>
  <artifactId>setter-xml</artifactId>

・（2018.03.16）セッターインジェクション（アノテーションベースコンフィギュレーション）

  <groupId>example.inject</groupId>
  <artifactId>setter-annotation</artifactId>

・（2018.03.16）コンストラクタインジェクション（引数のindex指定）

  <groupId>example.inject</groupId>
  <artifactId>constructor-index</artifactId>

・（2018.03.16）コンストラクタインジェクション（引数名指定）

  <groupId>example.inject</groupId>
  <artifactId>constructor-argname</artifactId>

・（2018.03.16）フィールドインデックス

  <groupId>example.inject</groupId>
  <artifactId>field-inject</artifactId>

【2.1.5:オートワイヤリング】

・（2018.03.16）インジェクションを必須としないフィールドインジェクション

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-required-false</artifactId>

・（2018.03.16）Optionalを用いたフィールドインジェクション

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-optional</artifactId>

・（2018.03.16）@QualifierによるインジェクションするBeanの指定（Bean名）

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-qualifier-name</artifactId>

・（2018.03.16）@Primaryを指定

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-primary</artifactId>

・（2018.03.16）@QualifierによるインジェクションするBeanの指定（用途名）

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-qualifier-usage</artifactId>

・（2018.03.18）@Qualifierを付与した@KLightweightアノテーションによるフィールドインジェクション

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-lightweight-annotation</artifactId>

・（2018.03.18）@Resourceによるbeen名を明示的に指定したインジェクション

  <groupId>example.autowiring</groupId>
  <artifactId>resource-byname</artifactId>

・（2018.03.18）@Resource：フィールド名がbeen名に一致

  <groupId>example.autowiring</groupId>
  <artifactId>resource-fieldname</artifactId>

・（2018.03.18）@Resource：プロパティー名がbeen名に一致

  <groupId>example.autowiring</groupId>
  <artifactId>resource-propertyname</artifactId>

・（2018.03.20）IFインターフェースを実装したBeanをすべて取得

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-bean-collection</artifactId>

・（2018.03.20）コレクションのBean定義とインジェクション

  <groupId>example.autowiring</groupId>
  <artifactId>autowired-collection-bean</artifactId>

【2.1.6:コンポネントスキャン】

・（2018.03.21）代入可能な型によるフィルタ（Java Config）

  <groupId>example.componentscan</groupId>
  <artifactId>scanfilter-assignable-java</artifactId>

・（2018.03.21）代入可能な型によるフィルタ（XML Config）

  <groupId>example.componentscan</groupId>
  <artifactId>scanfilter-assignable-xml</artifactId>

・（2018.03.21）正規表現によるフィルタ（Java Config）

  <groupId>example.componentscan</groupId>
  <artifactId>scanfilter-regex-java</artifactId>

・（2018.03.21）正規表現によるフィルタ（XML）

  <groupId>example.componentscan</groupId>
  <artifactId>scanfilter-regex-xml</artifactId>

・（2018.03.21）デフォルトのコンポーネントスキャンを無効化（Java Config）

  <groupId>example.componentscan</groupId>
  <artifactId>scanfilter-notusedefaultfilters-java</artifactId>

